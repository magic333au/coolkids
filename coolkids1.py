import logging
import re
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
import asyncio
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
API_TOKEN = '8080145988:AAEC2ZnTEwfwJk_5NNaNb2vZ2tIQYkyFfmQ'

# chat_id
NOTIFY_CHAT_ID = -4769417229 

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –•—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_registrations = {}

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class Form(StatesGroup):
    waiting_for_event = State()
    
    # –í–∑—Ä–æ—Å–ª—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    waiting_for_mafia_option = State()
    waiting_for_mafia_questions = State()
    waiting_for_mafia_locations_keyboard = State()
    waiting_for_mafia_date = State()
    waiting_for_mafia_registration = State()

    waiting_for_breakfast_option = State()
    waiting_for_breakfast_question = State()
    waiting_for_breakfast_date = State()
    waiting_for_breakfast_registration = State()

    waiting_for_lecture_option = State()
    waiting_for_lecture_topic = State()
    waiting_for_lecture_registration = State()

    # –î–µ—Ç—Å–∫–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    waiting_for_birthday_option = State()

    waiting_for_masterclass_option = State()
    waiting_for_masterclass_type = State()
    waiting_for_masterclass_info = State()
    waiting_for_masterclass_schedule = State()
    waiting_for_masterclass_registration = State()

    waiting_for_camp_option = State()
    waiting_for_camp_details = State()
    waiting_for_camp_registration = State()

    waiting_for_chess_option = State()
    waiting_for_chess_data = State()
    waiting_for_drawing_option = State()
    waiting_for_drawing_registration = State()

    waiting_for_english_option = State()
    waiting_for_english_age = State()
    waiting_for_english_registration = State()

    waiting_for_school_prep_option = State()
    waiting_for_school_prep_registration = State()

    waiting_for_camp_back_to_description = State()
    waiting_for_user_data = State()

# –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
events = {
    "adult": {
        "–ó–∞–≤—Ç—Ä–∞–∫ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º": {
            "description": "–£—é—Ç–Ω—ã–π –∑–∞–≤—Ç—Ä–∞–∫ —Å –æ–±—Å—É–∂–¥–µ–Ω–∏–µ–º —Ñ–∏–ª—å–º–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ! –≠—Ç–æ –æ—Ç–ª–∏—á–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –≤ –Ω–µ–ø—Ä–∏–Ω—É–∂–¥—ë–Ω–Ω–æ–π –∞—Ç–º–æ—Å—Ñ–µ—Ä–µ, –∞ —Ç–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è –≤ –∫–æ–º–ø–∞–Ω–∏–∏ –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤.",
            "price": "1000 —Ä—É–±",
            "film": "–ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ –º—ã —Å–º–æ—Ç—Ä–∏–º –∏ –æ–±—Å—É–∂–¥–∞–µ–º —Ñ–∏–ª—å–º 'The Grand Budapest Hotel' (2014) —Ä–µ–∂–∏—Å—Å–µ—Ä–∞ –£—ç—Å–∞ –ê–Ω–¥–µ—Ä—Å–æ–Ω–∞.",
            "locations": {
                "–ß–∞—á–∞": ["–°—Ä–µ–¥–∞ 11:00", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ 11:00"],
                "–õ–æ—Ñ—Ç": ["–°—Ä–µ–¥–∞ 11:00", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ 11:00"]
            },
            "addresses": {
                "–ß–∞—á–∞": "–®–ª–∏—Å—Å–µ–ª—å–±—É—Ä–≥—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç –¥.3",
                "–õ–æ—Ñ—Ç": "–†—ã–±–∞—Ü–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç 23"
            }
        },
        "–ú–∞—Ñ–∏—è 18+": {
            "description": "–ì–æ—Ç–æ–≤—ã –ø—Ä–∏–º–µ—Ä–∏—Ç—å –Ω–∞ —Å–µ–±—è —Ä–æ–ª—å –º–∞—Ñ–∏–æ–∑–∏ –∏–ª–∏ —Ä–∞—Å–∫—Ä—ã—Ç—å –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–µ?\n\n–£ –Ω–∞—Å —Å–æ–±–∏—Ä–∞–µ—Ç—Å—è –∑–∞–∫—Ä—ã—Ç–∞—è –∏–≥—Ä–∞ –≤ ¬´–ú–∞—Ñ–∏—é¬ª –¥–ª—è –≤–∑—Ä–æ—Å–ª—ã—Ö!\n\n–í–∞—Å –∂–¥—ë—Ç –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∞—è –∏–≥—Ä–∞ –≤ –∫–æ–º–ø–∞–Ω–∏–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –ª—é–¥–µ–π, –≥–¥–µ –∫–∞–∂–¥—ã–π –º–æ–∂–µ—Ç —Å—Ç–∞—Ç—å –≥–µ—Ä–æ–µ–º –∏–ª–∏ —Ö–∏—Ç—Ä—ã–º –∑–ª–æ–¥–µ–µ–º.\n\n–ù–∞—Å—Ç–æ—è—â–∏–µ —ç–º–æ—Ü–∏–∏, –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ –ø–æ–≤–æ—Ä–æ—Ç—ã –∏ –º–æ—Ä–µ –≤–µ—Å–µ–ª—å—è ‚Äî –≤—Å—ë —ç—Ç–æ ¬´–ú–∞—Ñ–∏—è 18+¬ª!\n\n–ì–æ—Ç–æ–≤—ã –∏—Å–ø—ã—Ç–∞—Ç—å —Å–µ–±—è?",
            "price": "800 —Ä—É–±",
            "newbie_info": "–ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π—Ç–µ! –î–∞–∂–µ –µ—Å–ª–∏ –≤—ã –Ω–∏ —Ä–∞–∑—É –Ω–µ –∏–≥—Ä–∞–ª–∏ ‚Äî –≤–µ–¥—É—â–∏–π –≤—Å—ë –æ–±—ä—è—Å–Ω–∏—Ç, –ø–æ–¥–¥–µ—Ä–∂–∏—Ç –∏ –ø–æ–º–æ–∂–µ—Ç –≤–ª–∏—Ç—å—Å—è –≤ –∏–≥—Ä—É.\n\n–ì–ª–∞–≤–Ω–æ–µ ‚Äî –∂–µ–ª–∞–Ω–∏–µ –≤–µ—Å–µ–ª–∏—Ç—å—Å—è –∏ –æ–±—â–∞—Ç—å—Å—è!",
            "locations": {
                "–õ–æ—Ñ—Ç": ["–ü—è—Ç–Ω–∏—Ü–∞ 19:00", "–°—É–±–±–æ—Ç–∞ 19:00"]
            },
            "address": "–†—ã–±–∞—Ü–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç 23/2"
        },
        "–õ–µ–∫—Ü–∏–∏": {
            "description": "üåü –•–æ—Ç–∏—Ç–µ –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ —Å–∞–º—ã—Ö –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ç–µ–º –≤ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏, –≤–æ—Å–ø–∏—Ç–∞–Ω–∏–∏ –∏ —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–∏?\n\n–¢–µ–ø–µ—Ä—å –Ω–µ –Ω—É–∂–Ω–æ –µ—Ö–∞—Ç—å –≤ —Ü–µ–Ω—Ç—Ä –≥–æ—Ä–æ–¥–∞ ‚Äî —É –Ω–∞—Å –≤ –†—ã–±–∞—Ü–∫–æ–º –ø—Ä–æ—Ö–æ–¥—è—Ç –∂–∏–≤—ã–µ –≤—Å—Ç—Ä–µ—á–∏ —Å —ç–∫—Å–ø–µ—Ä—Ç–∞–º–∏ –∏ –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–∞–º–∏!",
            "address": "–†—ã–±–∞—Ü–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç 23/2",
            "lectures": {
                "–ù–∞–≤—ã–∫–∏ XXI –≤–µ–∫–∞ –∏ –ò–ò": {
                    "title": "–ö–∞–∫ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Ä–µ–±—ë–Ω–∫–∞ –∫ –±—É–¥—É—â–µ–º—É: –Ω–∞–≤—ã–∫–∏ XXI –≤–µ–∫–∞ –∏ —Ä–æ–ª—å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞",
                    "description": "–ß—Ç–æ –≤–∞–∂–Ω–æ —Ä–∞–∑–≤–∏–≤–∞—Ç—å –≤ –¥–µ—Ç—è—Ö —É–∂–µ —Å–µ–≥–æ–¥–Ω—è, —á—Ç–æ–±—ã –æ–Ω–∏ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω—ã–º–∏ –∑–∞–≤—Ç—Ä–∞? –ö–∞–∫ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ –ò–ò –≤–ª–∏—è—é—Ç –Ω–∞ –∏—Ö –∂–∏–∑–Ω—å?",
                    "date": "–ö–∞–∂–¥—ã–π –≤—Ç–æ—Ä–æ–π –≤—Ç–æ—Ä–Ω–∏–∫ –º–µ—Å—è—Ü–∞ –≤ 19:00"
                },
                "–§–∏–Ω—Å–∫–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ": {
                    "title": "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ–±—É—á–µ–Ω–∏—è: –ø–æ—á–µ–º—É —É —Ñ–∏–Ω—Å–∫–∏—Ö —à–∫–æ–ª—å–Ω–∏–∫–æ–≤ –Ω–µ—Ç –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π, –∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã ‚Äî –ª—É—á—à–∏–µ –≤ –º–∏—Ä–µ?",
                    "description": "–ß—Ç–æ –º—ã –º–æ–∂–µ–º –≤–∑—è—Ç—å –Ω–∞ –∑–∞–º–µ—Ç–∫—É –¥–ª—è —Å–≤–æ–∏—Ö –¥–µ—Ç–µ–π? –ö–∞–∫–∏–µ –ø–æ–¥—Ö–æ–¥—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞—é—Ç?",
                    "date": "–ö–∞–∂–¥—ã–π –≤—Ç–æ—Ä–æ–π —á–µ—Ç–≤–µ—Ä–≥ –º–µ—Å—è—Ü–∞ –≤ 19:00"
                },
                "–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç": {
                    "title": "–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç —É –≤–∑—Ä–æ—Å–ª—ã—Ö: –∑–∞—á–µ–º –æ–Ω –Ω—É–∂–µ–Ω –∏ –∫–∞–∫ —Ä–∞–∑–≤–∏–≤–∞—Ç—å –¥–æ–º–∞ –∏ –Ω–∞ —Ä–∞–±–æ—Ç–µ",
                    "description": "–ö–∞–∫ —Å—Ç–∞—Ç—å —Å—á–∞—Å—Ç–ª–∏–≤–µ–µ, —É—Å–ø–µ—à–Ω–µ–µ –∏ –≥–∞—Ä–º–æ–Ω–∏—á–Ω–µ–µ, –ø–æ–Ω–∏–º–∞—è —Å–≤–æ–∏ —á—É–≤—Å—Ç–≤–∞ –∏ —ç–º–æ—Ü–∏–∏ –¥—Ä—É–≥–∏—Ö?",
                    "date": "–ö–∞–∂–¥—É—é –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—É–±–±–æ—Ç—É –º–µ—Å—è—Ü–∞ –≤ 17:00"
                }
            },
            "price": "500 —Ä—É–±"
        }
    },
    "child": {
        "–î–µ—Ç—Å–∫–∏–π –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è": {
            "description": "–í–æ–ª—à–µ–±–Ω—ã–π –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –¥–ª—è –≤–∞—à–µ–≥–æ —Ä–µ–±—ë–Ω–∫–∞!",
            "details": "–ü–æ–¥–∞—Ä–∏—Ç–µ —Å–≤–æ–µ–º—É —Ä–µ–±—ë–Ω–∫—É –Ω–∞—Å—Ç–æ—è—â–∏–π –ø—Ä–∞–∑–¥–Ω–∏–∫ ‚Äî —è—Ä–∫–∏–π, –≤–µ—Å—ë–ª—ã–π –∏ –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã–π!\n\n"
                      "–ú—ã –æ—Ä–≥–∞–Ω–∏–∑—É–µ–º –¥–µ—Ç—Å–∫–∏–µ –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è ¬´–ø–æ–¥ –∫–ª—é—á¬ª: –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏–µ —à–æ—É-–ø—Ä–æ–≥—Ä–∞–º–º—ã, –ª—é–±–∏–º—ã–µ –≥–µ—Ä–æ–∏, "
                      "–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∏–≥—Ä—ã, —Ç–≤–æ—Ä—á–µ—Å–∫–∏–µ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã –∏ –º–æ—Ä–µ —Ä–∞–¥–æ—Å—Ç–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≥–æ—Å—Ç—è.\n\n"
                      "–í–∞—à–∞ –∑–∞–¥–∞—á–∞ ‚Äî —Ç–æ–ª—å–∫–æ –Ω–∞—Å–ª–∞–∂–¥–∞—Ç—å—Å—è —Å—á–∞—Å—Ç–ª–∏–≤—ã–º–∏ —É–ª—ã–±–∫–∞–º–∏, –æ–±–æ –≤—Å—ë–º –æ—Å—Ç–∞–ª—å–Ω–æ–º –ø–æ–∑–∞–±–æ—Ç–∏–º—Å—è –º—ã.\n\n"
                      "–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å, –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∞–Ω–∏–º–∞—Ç–æ—Ä—ã –∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞ –Ω–∞—Å—Ç–æ—è—â–µ–π —Å–∫–∞–∑–∫–∏ ‚Äî "
                      "–≤–∞—à —Ä–µ–±—ë–Ω–æ–∫ –∏ –µ–≥–æ –¥—Ä—É–∑—å—è –±—É–¥—É—Ç –≤ –≤–æ—Å—Ç–æ—Ä–≥–µ!\n\n"
                      "–î–∞–≤–∞–π—Ç–µ –≤–º–µ—Å—Ç–µ —Å–¥–µ–ª–∞–µ–º —ç—Ç–æ—Ç –¥–µ–Ω—å –æ—Å–æ–±–µ–Ω–Ω—ã–º –∏ –Ω–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º —á—É–¥–µ—Å–∞–º–∏!",
            "additional_info": "–ü–æ—á–µ–º—É –∏–º–µ–Ω–Ω–æ –º—ã?\n"
                               "‚Ä¢ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥: –ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –æ–ø—ã—Ç–Ω—ã—Ö –ø–µ–¥–∞–≥–æ–≥–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –∑–Ω–∞—é—Ç, –∫–∞–∫ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –¥–µ—Ç—å–º–∏ –∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –¥–ª—è –Ω–∏—Ö —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏.\n"
                               "‚Ä¢ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã: –ú—ã —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É —Å —É—á–µ—Ç–æ–º –≤–æ–∑—Ä–∞—Å—Ç–∞, –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π –≤–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞. –ö–∞–∂–¥—ã–π –ø—Ä–∞–∑–¥–Ω–∏–∫ ‚Äî —ç—Ç–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ!\n"
                               "‚Ä¢ –†–∞–∑–≤–∏—Ç–∏–µ —á–µ—Ä–µ–∑ –∏–≥—Ä—É: –ú—ã –Ω–µ –ø—Ä–æ—Å—Ç–æ —Ä–∞–∑–≤–ª–µ–∫–∞–µ–º, –Ω–æ –∏ –æ–±—É—á–∞–µ–º! –ù–∞—à–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —Å–ø–æ—Å–æ–±—Å—Ç–≤—É—é—Ç —Ä–∞–∑–≤–∏—Ç–∏—é —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤, –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ —Å–µ–±–µ."
        },
        "–ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å –≤ –ß–∞—á–µ": {
            "description": "üçïüçîüç° –ü—Ä–∏–≤–µ—Ç! –•–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã –≤–∞—à —Ä–µ–±—ë–Ω–æ–∫ –ø–æ–ø—Ä–æ–±–æ–≤–∞–ª —Å–µ–±—è –≤ —Ä–æ–ª–∏ –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ —à–µ—Ñ-–ø–æ–≤–∞—Ä–∞?",
            "details": "–í —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ ¬´–ß–∞—á–∞¬ª –º—ã –ø—Ä–æ–≤–æ–¥–∏–º –≤–µ—Å—ë–ª—ã–µ –∏ –≤–∫—É—Å–Ω—ã–µ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã –¥–ª—è –¥–µ—Ç–µ–π!",
            "options": {
                "–ü–∏—Ü—Ü–∞": "–î–µ—Ç–∏ —É—á–∞—Ç—Å—è –≥–æ—Ç–æ–≤–∏—Ç—å –Ω–∞—Å—Ç–æ—è—â—É—é –ø–∏—Ü—Ü—É —Å —Ä–∞–∑–Ω—ã–º–∏ –Ω–∞—á–∏–Ω–∫–∞–º–∏!",
                "–ì–∞–º–±—É—Ä–≥–µ—Ä—ã": "–ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å –ø–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—é —Å–æ—á–Ω—ã—Ö –±—É—Ä–≥–µ—Ä–æ–≤",
                "–ö–µ–π-–ø–æ–ø—Å—ã": "–Ø—Ä–∫–∏–µ –∏ –≤–∫—É—Å–Ω—ã–µ –∫–µ–π-–ø–æ–ø—Å—ã - –ª—é–±–∏–º–æ–µ –ª–∞–∫–æ–º—Å—Ç–≤–æ –¥–µ—Ç–µ–π",
                "–í—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã": "–ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã –¥–ª—è –¥–µ—Ç–µ–π —Ä–∞–∑–Ω–æ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞!"
            },
            "schedule": {
                "–ü–∏—Ü—Ü–∞": "–°—É–±–±–æ—Ç–∞ 12:00",
                "–ì–∞–º–±—É—Ä–≥–µ—Ä—ã": "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ 12:00",
                "–ö–µ–π-–ø–æ–ø—Å—ã": "–°—É–±–±–æ—Ç–∞ 15:00"
            },
            "price": "1500 —Ä—É–±",
            "address": "–®–ª–∏—Å—Å–µ–ª—å–±—É—Ä–≥—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç –¥.3",
            "info": "–í—Å–µ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã –ø—Ä–æ—Ö–æ–¥—è—Ç –≤ —É—é—Ç–Ω–æ–π –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∞—Ç–º–æ—Å—Ñ–µ—Ä–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ ¬´–ß–∞—á–∞¬ª, –ø–æ–¥—Ö–æ–¥—è—Ç –¥–ª—è –¥–µ—Ç–µ–π –æ—Ç 5 –ª–µ—Ç.\n"
                    "–í —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—Ö–æ–¥–∏—Ç –≤—Å—ë –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ: –ø—Ä–æ–¥—É–∫—Ç—ã, —Ñ–∞—Ä—Ç—É–∫, –¥–∏–ø–ª–æ–º –º–∞–ª–µ–Ω—å–∫–æ–≥–æ –ø–æ–≤–∞—Ä–∞ –∏ –º–æ—Ä–µ –ø–æ–∑–∏—Ç–∏–≤–∞!"
        },
        "–®–∞—Ö–º–∞—Ç—ã": {
            "description": "‚ôüÔ∏è –ü—Ä–∏–≤–µ—Ç! –•–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã –≤–∞—à —Ä–µ–±—ë–Ω–æ–∫ –ø—Ä–æ–≤—ë–ª –ª–µ—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ –∏ —Å –ø–æ–ª—å–∑–æ–π?",
            "details": "–í —Ü–µ–Ω—Ç—Ä–µ CoolKids –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é –ø—Ä–æ—Ö–æ–¥—è—Ç —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ —à–∞—Ö–º–∞—Ç–Ω—ã–µ –∏–≥—Ä—ã –¥–ª—è –¥–µ—Ç–µ–π!",
            "schedule": "–ú—ã –∏–≥—Ä–∞–µ–º –≤ —à–∞—Ö–º–∞—Ç—ã –ø–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞–º –≤ 17:00 –∏ 18:00",
            "price": "700 —Ä—É–± –∑–∞ –∑–∞–Ω—è—Ç–∏–µ",
            "address": "–†—ã–±–∞—Ü–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç 23/2"
        },
        "–†–∏—Å–æ–≤–∞–Ω–∏–µ": {
            "description": "üé® –†–∏—Å–æ–≤–∞–Ω–∏–µ ‚Äî —ç—Ç–æ –º–æ—Ä–µ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è, —Ä–∞–∑–≤–∏—Ç–∏–µ –≤–æ–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –Ω–æ–≤—ã–µ –¥—Ä—É–∑—å—è!",
            "details": "–ù–∞ –Ω–∞—à–∏—Ö –∑–∞–Ω—è—Ç–∏—è—Ö –¥–µ—Ç–∏ –ø—Ä–æ–±—É—é—Ç —Ä–∞–∑–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏, —Å–æ–∑–¥–∞—é—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç–∏–Ω—ã –∏ —É—á–∞—Ç—Å—è –≤—ã—Ä–∞–∂–∞—Ç—å —Å–µ–±—è —á–µ—Ä–µ–∑ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ.",
            "schedule": "–ó–∞–Ω—è—Ç–∏—è –ø—Ä–æ—Ö–æ–¥—è—Ç –ø–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞–º –≤ 17:00 –∏ 18:00",
            "price": "700 —Ä—É–± –∑–∞ –∑–∞–Ω—è—Ç–∏–µ",
            "address": "–†—ã–±–∞—Ü–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç 23/2",
            "info": "–í—Å–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—Ç—Å—è, –∞ —Ä–∞–±–æ—Ç—ã –º–æ–∂–Ω–æ –∑–∞–±–∏—Ä–∞—Ç—å –¥–æ–º–æ–π!"
        },
        "–ì–æ—Ä–æ–¥—Å–∫–æ–π –ª–∞–≥–µ—Ä—å": {
            "description": "üåû –ò—â–µ—Ç–µ, —á–µ–º –∑–∞–Ω—è—Ç—å —Ä–µ–±—ë–Ω–∫–∞ –ª–µ—Ç–æ–º, —á—Ç–æ–±—ã –±—ã–ª–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –ø–æ–ª–µ–∑–Ω–æ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ?",
            "details": "–£ –Ω–∞—Å –µ—Å—Ç—å –∫—Ä—É—Ç—ã–µ –≥–æ—Ä–æ–¥—Å–∫–∏–µ –ª–∞–≥–µ—Ä—è —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∞–º–∏ –¥–ª—è –¥–µ—Ç–µ–π!",
            "camps": {
                "–î–µ—Ç–∏ –≤ –±–∏–∑–Ω–µ—Å–µ": {
                    "dates": "9-13 –∏—é–Ω—è",
                    "description": "–ü–æ–≥—Ä—É–∂–∞–µ–º—Å—è –≤ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏–π –º–∏—Ä –±–∏–∑–Ω–µ—Å–∞! –ù–∞ —ç—Ç–æ–π —Å–º–µ–Ω–µ –¥–µ—Ç–∏ –ø–æ–ø—Ä–æ–±—É—é—Ç —Å–µ–±—è –≤ —Ä–æ–ª–∏ –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª–µ–π: –Ω–∞—É—á–∞—Ç—Å—è –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–¥–µ–∏, —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–≤–æ–π –º–∏–Ω–∏-–±–∏–∑–Ω–µ—Å, —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥–µ, –≤–µ—Å—Ç–∏ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä—ã –∏ –¥–∞–∂–µ –ø—Ä–µ–∑–µ–Ω—Ç–æ–≤–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ–µ–∫—Ç. –í –ø—Ä–æ–≥—Ä–∞–º–º–µ ‚Äî –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã, –∏–≥—Ä—ã –Ω–∞ —Ä–∞–∑–≤–∏—Ç–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏, —ç–∫—Å–∫—É—Ä—Å–∏—è –≤ –Ω–∞—Å—Ç–æ—è—â–∏–π –±–∏–∑–Ω–µ—Å-—Ü–µ–Ω—Ç—Ä –∏, –∫–æ–Ω–µ—á–Ω–æ, –º–æ—Ä–µ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è!"
                },
                "–ü—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ —Å –ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä–æ–º": {
                    "dates": "16-20 –∏—é–Ω—è",
                    "description": "–í–æ–ª—à–µ–±–Ω–∞—è –Ω–µ–¥–µ–ª—è –¥–ª—è –Ω–∞—Å—Ç–æ—è—â–∏—Ö —Ñ–∞–Ω–∞—Ç–æ–≤ –ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä–∞! –†–µ–±—è—Ç–∞ –ø–æ–ø–∞–¥—É—Ç –≤ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –•–æ–≥–≤–∞—Ä—Ç—Å–∞: —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è—Ç—Å—è –ø–æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞–º, –±—É–¥—É—Ç —É—á–∏—Ç—å—Å—è –º–∞–≥–∏—á–µ—Å–∫–∏–º –Ω–∞—É–∫–∞–º, –∏—Å–∫–∞—Ç—å —Ç–∞–π–Ω—ã–µ –ø–æ—Å–ª–∞–Ω–∏—è, –≤–∞—Ä–∏—Ç—å –∑–µ–ª—å—è –∏ —Å—Ä–∞–∑—è—Ç—Å—è –≤ –∫–≤–∏–¥–¥–∏—á. –í –ø—Ä–æ–≥—Ä–∞–º–º–µ ‚Äî —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∫–≤–µ—Å—Ç—ã, –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã, —Ç–≤–æ—Ä—á–µ—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è –∏ —ç–∫—Å–∫—É—Ä—Å–∏—è –≤ ¬´–≤–æ–ª—à–µ–±–Ω–æ–µ¬ª –º–µ—Å—Ç–æ –≥–æ—Ä–æ–¥–∞!"
                },
                "–ú–∏—Ä —ç–º–æ—Ü–∏–π": {
                    "dates": "7-11 –∏—é–ª—è",
                    "description": "–ù–µ–¥–µ–ª—è, –ø–æ—Å–≤—è—â—ë–Ω–Ω–∞—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–º—É –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É –∏ –¥—Ä—É–∂–±–µ! –î–µ—Ç–∏ —É–∑–Ω–∞—é—Ç, –∫–∞–∫ –ø–æ–Ω–∏–º–∞—Ç—å –∏ –≤—ã—Ä–∞–∂–∞—Ç—å —Å–≤–æ–∏ —á—É–≤—Å—Ç–≤–∞, —É—á–∏—Ç—å—Å—è –¥–æ–≥–æ–≤–∞—Ä–∏–≤–∞—Ç—å—Å—è, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –¥—Ä—É–≥ –¥—Ä—É–≥–∞ –∏ –Ω–∞—Ö–æ–¥–∏—Ç—å –Ω–æ–≤—ã—Ö –¥—Ä—É–∑–µ–π. –í –ø—Ä–æ–≥—Ä–∞–º–º–µ ‚Äî —Ç—Ä–µ–Ω–∏–Ω–≥–∏ –Ω–∞ —Ä–∞–∑–≤–∏—Ç–∏–µ —ç–º–ø–∞—Ç–∏–∏, —Ç–≤–æ—Ä—á–µ—Å–∫–∏–µ –∑–∞–Ω—è—Ç–∏—è, –∞—Ä—Ç-—Ç–µ—Ä–∞–ø–∏—è, –∞–∫—Ç–∏–≤–Ω—ã–µ –∏–≥—Ä—ã –∏ —ç–∫—Å–∫—É—Ä—Å–∏—è –≤ —Ü–µ–Ω—Ç—Ä —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞!"
                },
                "–Ø—Ä–º–∞—Ä–∫–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–π": {
                    "dates": "14-18 –∏—é–ª—è",
                    "description": "–ü–æ–≥—Ä—É–∂–µ–Ω–∏–µ –≤ –º–∏—Ä —Ä–∞–∑–Ω—ã—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–π! –ö–∞–∂–¥—ã–π –¥–µ–Ω—å ‚Äî –Ω–æ–≤–∞—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å: –æ—Ç –≤—Ä–∞—á–∞ –¥–æ –∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞, –æ—Ç –∂—É—Ä–Ω–∞–ª–∏—Å—Ç–∞ –¥–æ —à–µ—Ñ-–ø–æ–≤–∞—Ä–∞. –î–µ—Ç–∏ –ø–æ–ø—Ä–æ–±—É—é—Ç —Å–µ–±—è –≤ —Ä–∞–∑–Ω—ã—Ö —Ä–æ–ª—è—Ö, –ø–æ–æ–±—â–∞—é—Ç—Å—è —Å –Ω–∞—Å—Ç–æ—è—â–∏–º–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∞–º–∏, –ø–æ—É—á–∞—Å—Ç–≤—É—é—Ç –≤ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–∞—Ö –∏ —ç–∫—Å–∫—É—Ä—Å–∏—è—Ö. –≠—Ç–æ –æ—Ç–ª–∏—á–Ω—ã–π —à–∞–Ω—Å —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –º–∏—Ä–µ –≤–∑—Ä–æ—Å–ª—ã—Ö –∏ –Ω–∞–π—Ç–∏ —Å–≤–æ—ë –ø—Ä–∏–∑–≤–∞–Ω–∏–µ!"
                },
                "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —à–∫–æ–ª–µ": {
                    "dates": "18-22 –∞–≤–≥—É—Å—Ç–∞",
                    "description": "–ò–¥–µ–∞–ª—å–Ω–∞—è —Å–º–µ–Ω–∞ –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —Ö–æ—á–µ—Ç –ª–µ–≥–∫–æ –∏ –≤–µ—Å–µ–ª–æ –≤–æ–π—Ç–∏ –≤ –Ω–æ–≤—ã–π —É—á–µ–±–Ω—ã–π –≥–æ–¥! –ú—ã –ø–æ–≤—Ç–æ—Ä–∏–º —à–∫–æ–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É –≤ –∏–≥—Ä–æ–≤–æ–π —Ñ–æ—Ä–º–µ, –ø–æ—Ç—Ä–µ–Ω–∏—Ä—É–µ–º –ø–∞–º—è—Ç—å –∏ –≤–Ω–∏–º–∞–Ω–∏–µ, —Ä–∞–∑–æ–≤—å—ë–º –Ω–∞–≤—ã–∫–∏ –æ–±—â–µ–Ω–∏—è –∏ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏. –í –ø—Ä–æ–≥—Ä–∞–º–º–µ ‚Äî –∑–∞–Ω—è—Ç–∏—è —Å –ø–µ–¥–∞–≥–æ–≥–∞–º–∏, –ø–æ–ª–µ–∑–Ω—ã–µ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã, –ø—Ä–æ–≥—É–ª–∫–∏, –ø–æ–¥–≤–∏–∂–Ω—ã–µ –∏–≥—Ä—ã –∏ —ç–∫—Å–∫—É—Ä—Å–∏—è."
                },
                "–®–∫–æ–ª–∞ –±–ª–æ–≥–µ—Ä–æ–≤": {
                    "dates": "25-29 –∞–≤–≥—É—Å—Ç–∞",
                    "description": "–ù–µ–¥–µ–ª—è –¥–ª—è –±—É–¥—É—â–∏—Ö –∑–≤—ë–∑–¥ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞! –î–µ—Ç–∏ —É–∑–Ω–∞—é—Ç, –∫–∞–∫ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –≤–∏–¥–µ–æ, –≤–µ—Å—Ç–∏ —Å–≤–æ–π –±–ª–æ–≥, —Å–Ω–∏–º–∞—Ç—å —Å—Ç–æ—Ä–∏—Å –∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–æ–ª–∏–∫–∏. –í –ø—Ä–æ–≥—Ä–∞–º–º–µ ‚Äî –æ—Å–Ω–æ–≤—ã —Ä–∞–±–æ—Ç—ã —Å –∫–∞–º–µ—Ä–æ–π –∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω–æ–º, —Å–µ–∫—Ä–µ—Ç—ã —É—Å–ø–µ—à–Ω—ã—Ö –±–ª–æ–≥–µ—Ä–æ–≤, —Ç–≤–æ—Ä—á–µ—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è, –∫–æ–º–∞–Ω–¥–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã –∏ —ç–∫—Å–∫—É—Ä—Å–∏—è –≤ –º–µ–¥–∏–∞-—Å—Ç—É–¥–∏—é!"
                }
            },
            "price": "13 500‚ÇΩ –∑–∞ —Å–º–µ–Ω—É",
            "address": "–†—ã–±–∞—Ü–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç 23/2",
            "info": "–ö–∞–∂–¥–∞—è —Å–º–µ–Ω–∞ –≤–∫–ª—é—á–∞–µ—Ç:\n‚Ä¢ –ø—Ä–µ–±—ã–≤–∞–Ω–∏–µ –≤ —Ü–µ–Ω—Ç—Ä–µ —Å 10:00 –¥–æ 17:00\n‚Ä¢ –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –æ–±–µ–¥ –∏ –ø–æ–ª–µ–∑–Ω—ã–π –ø–µ—Ä–µ–∫—É—Å\n‚Ä¢ –ø—Ä–æ–≥—É–ª–∫–∏ –Ω–∞ —Å–≤–µ–∂–µ–º –≤–æ–∑–¥—É—Ö–µ\n‚Ä¢ –∑–∞–Ω—è—Ç–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–∏–º\n‚Ä¢ –∞–∫—Ç–∏–≤–Ω—ã–µ –∏–≥—Ä—ã\n‚Ä¢ —ç–∫—Å–∫—É—Ä—Å–∏—é –ø–æ —Ç–µ–º–µ —Å–º–µ–Ω—ã"
        },
        "–ö—É—Ä—Å—ã –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞": {
            "description": "–•–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã –≤–∞—à —Ä–µ–±—ë–Ω–æ–∫ —É—á–∏–ª –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º –∏ –ª–µ–≥–∫–æ?",
            "details": "–í –¶–µ–Ω—Ç—Ä–µ –¥–µ—Ç—Å–∫–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è CoolKids –æ—Ç–∫—Ä—ã—Ç–∞ –∑–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–æ–±–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è –ø–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É —è–∑—ã–∫—É –¥–ª—è –¥–µ—Ç–µ–π —Ä–∞–∑–Ω—ã—Ö –≤–æ–∑—Ä–∞—Å—Ç–æ–≤!",
            "schedule": {
                "4‚Äì5 –ª–µ—Ç": ["26 –∞–≤–≥—É—Å—Ç–∞ –≤ 18:00"],
                "6‚Äì7 –ª–µ—Ç": ["26 –∞–≤–≥—É—Å—Ç–∞ –≤ 19:00", "28 –∞–≤–≥—É—Å—Ç–∞ –≤ 18:00"],
                "8‚Äì10 –ª–µ—Ç": ["28 –∞–≤–≥—É—Å—Ç–∞ –≤ 19:00"],
                "–°—Ç–∞—Ä—à–µ 10 –ª–µ—Ç": ["–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –∏–Ω—Ç–µ—Ä–≤—å—é —Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º"]
            },
            "price": "–ü–µ—Ä–≤–æ–µ –ø—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ - –±–µ—Å–ø–ª–∞—Ç–Ω–æ!",
            "address": "–†—ã–±–∞—Ü–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç 23/2",
            "info": "–ù–∞—à–∏ –∑–∞–Ω—è—Ç–∏—è –ø—Ä–æ—Ö–æ–¥—è—Ç –≤ –∏–≥—Ä–æ–≤–æ–π —Ñ–æ—Ä–º–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–∏–∫ –æ–±—É—á–µ–Ω–∏—è. –ú—ã –¥–µ–ª–∞–µ–º –∞–∫—Ü–µ–Ω—Ç –Ω–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–µ –∏ –ø—Ä–µ–æ–¥–æ–ª–µ–Ω–∏–∏ —è–∑—ã–∫–æ–≤–æ–≥–æ –±–∞—Ä—å–µ—Ä–∞."
        },
        "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —à–∫–æ–ª–µ": {
            "description": "–í –Ω–∞—à–µ–º —Ü–µ–Ω—Ç—Ä–µ –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è –ª–µ—Ç–Ω—è—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —à–∫–æ–ª–µ.",
            "details": "–ó–∞–Ω—è—Ç–∏—è –≤–∫–ª—é—á–∞—é—Ç:\n‚úîÔ∏è –ú–∞—Ç–µ–º–∞—Ç–∏–∫—É\n‚úîÔ∏è –ß—Ç–µ–Ω–∏–µ\n‚úîÔ∏è –û–∫—Ä—É–∂–∞—é—â–∏–π –º–∏—Ä\n‚úîÔ∏è –ü–∏—Å—å–º–æ",
            "price": "–°—Ç–æ–∏–º–æ—Å—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞: 4800 —Ä—É–±",
            "schedule": {
                "–°—Ä–µ–¥–∞": "17:00",
                "–°—É–±–±–æ—Ç–∞": "18:00"
            },
            "address": "–†—ã–±–∞—Ü–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç 23/2"
        },
        "–ö—É—Ä—Å—ã –∫–∏—Ç–∞–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞": {},
        "–ú–µ–¥–∏–∞-—Å—Ç—É–¥–∏—è": {},
        "–¢–µ–∞—Ç—Ä–∞–ª—å–Ω–∞—è —Å—Ç—É–¥–∏—è": {}
    }
}

# –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
def validate_name(name: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –∏–º—è —Å–æ—Å—Ç–æ–∏—Ç —Ç–æ–ª—å–∫–æ –∏–∑ –±—É–∫–≤ –∏ –∏–º–µ–µ—Ç —Ä–∞–∑—É–º–Ω—É—é –¥–ª–∏–Ω—É"""
    return bool(re.fullmatch(r'^[–∞-—è–ê-–Ø—ë–Åa-zA-Z\s\-]{2,50}$', name.strip()))

def validate_phone(phone: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    phone = re.sub(r'[^\d]', '', phone)
    return len(phone) in (10, 11) and phone.isdigit()

def validate_age(age: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–æ–∑—Ä–∞—Å—Ç–∞"""
    return age.isdigit() and 1 <= int(age) <= 120

def parse_user_data(text: str) -> dict:
    """–ü–∞—Ä—Å–∏—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–∞–Ω–Ω—ã–µ"""
    # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ —Ä–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ —á–∞—Å—Ç–∏
    parts = [p.strip() for p in text.split() if p.strip()]
    
    data = {
        'name': None,
        'age': None,
        'phone': None,
        'other': []
    }
    
    # –ò—â–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –≤ –ª—é–±–æ–º –º–µ—Å—Ç–µ —Å—Ç—Ä–æ–∫–∏
    phone_match = re.search(r'(\+7|8|7)[\s\-]?\(?\d{3}\)?[\s\-]?\d{3}[\s\-]?\d{2}[\s\-]?\d{2}', text)
    if phone_match:
        data['phone'] = re.sub(r'[^\d]', '', phone_match.group())
        # –£–¥–∞–ª—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –∏–∑ —á–∞—Å—Ç–µ–π
        parts = [p for p in parts if not re.search(r'(\+7|8|7)[\s\-]?\(?\d{3}\)?[\s\-]?\d{3}[\s\-]?\d{2}[\s\-]?\d{2}', p)]
    
    # –ò—â–µ–º –≤–æ–∑—Ä–∞—Å—Ç (—á–∏—Å–ª–æ —Å "–ª–µ—Ç" –∏–ª–∏ –±–µ–∑)
    age_match = None
    for i, part in enumerate(parts):
        if part.isdigit() and 1 <= int(part) <= 120:
            age_match = part
            data['age'] = age_match
            del parts[i]
            break
        elif re.fullmatch(r'\d+\s*–ª–µ—Ç', part.lower()):
            age_match = re.sub(r'\D', '', part)
            if age_match.isdigit() and 1 <= int(age_match) <= 120:
                data['age'] = age_match
                del parts[i]
                break
    
    # –û—Å—Ç–∞–≤—à–∏–µ—Å—è —á–∞—Å—Ç–∏ - –∏–º—è –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    if parts:
        data['name'] = ' '.join(parts[:2]) if len(parts) >= 2 else parts[0]
        data['other'] = parts[2:] if len(parts) > 2 else []
    
    return data

def format_registration(data: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
    parts = []
    if data.get('name'):
        parts.append(data['name'])
    if data.get('age'):
        parts.append(f"{data['age']} –ª–µ—Ç")
    if data.get('phone'):
        phone = data['phone']
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ 89123456789
        if len(phone) == 11 and phone.startswith('8'):
            phone = phone[1:]
        elif len(phone) == 11 and phone.startswith('7'):
            phone = '8' + phone[1:]
        parts.append(phone)
    if data.get('other'):
        parts.extend(data['other'])
    
    return ' '.join(parts)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_start_keyboard():
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="–ù–∞—á–∞—Ç—å",
        callback_data="start")
    )
    return builder.as_markup()

def get_event_type_keyboard():
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="–í–∑—Ä–æ—Å–ª–æ–µ",
        callback_data="adult")
    )
    builder.add(types.InlineKeyboardButton(
        text="–î–µ—Ç—Å–∫–æ–µ",
        callback_data="child")
    )
    builder.adjust(1)
    return builder.as_markup()

def get_adult_events_keyboard():
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="–ó–∞–≤—Ç—Ä–∞–∫ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º",
        callback_data="breakfast")
    )
    builder.add(types.InlineKeyboardButton(
        text="–ú–∞—Ñ–∏—è 18+",
        callback_data="mafia")
    )
    builder.add(types.InlineKeyboardButton(
        text="–õ–µ–∫—Ü–∏–∏",
        callback_data="lectures")
    )
    builder.add(types.InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
        callback_data="back_to_start")
    )
    builder.adjust(1)
    return builder.as_markup()

def get_child_events_keyboard():
    builder = InlineKeyboardBuilder()
    for event in events["child"].keys():
        if event in ["–ö—É—Ä—Å—ã –∫–∏—Ç–∞–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞", "–ú–µ–¥–∏–∞-—Å—Ç—É–¥–∏—è", "–¢–µ–∞—Ç—Ä–∞–ª—å–Ω–∞—è —Å—Ç—É–¥–∏—è"]:
            continue
        builder.add(types.InlineKeyboardButton(
            text=event,
            callback_data=f"child_{event.replace(' ', '_')}")
        )
    builder.add(types.InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
        callback_data="back_to_event_type")
    )
    builder.adjust(1)
    return builder.as_markup()

def get_school_prep_keyboard():
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="–î–∞, –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ",
        callback_data="school_prep_yes")
    )
    builder.add(types.InlineKeyboardButton(
        text="–ù–µ—Ç, —Å–ø–∞—Å–∏–±–æ",
        callback_data="child_back")
    )
    builder.adjust(1)
    return builder.as_markup()

def get_school_prep_details_keyboard():
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="–ó–∞–ø–∏—Å–∞—Ç—å—Å—è",
        callback_data="school_prep_register")
    )
    builder.add(types.InlineKeyboardButton(
        text="–ù–µ—Ç, –Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ",
        callback_data="back_to_start")
    )
    builder.adjust(1)
    return builder.as_markup()

def get_school_prep_schedule_keyboard():
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="–°—Ä–µ–¥–∞ 17:00",
        callback_data="school_prep_wed")
    )
    builder.add(types.InlineKeyboardButton(
        text="–°—É–±–±–æ—Ç–∞ 18:00",
        callback_data="school_prep_sat")
    )
    builder.adjust(1)
    return builder.as_markup()

def get_school_prep_success_keyboard():
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        callback_data="to_main_menu")
    )
    builder.adjust(1)
    return builder.as_markup()

def get_breakfast_options_keyboard():
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="–ö–æ–≥–¥–∞ –∏ –≥–¥–µ?",
        callback_data="breakfast_when_where")
    )
    builder.add(types.InlineKeyboardButton(
        text="–ó–∞—á–µ–º –º–Ω–µ —ç—Ç–æ?",
        callback_data="breakfast_why")
    )
    builder.add(types.InlineKeyboardButton(
        text="–•–æ—á—É –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è",
        callback_data="breakfast_register")
    )
    builder.add(types.InlineKeyboardButton(
        text="–ê –∫–∞–∫–∞—è —Ü–µ–Ω–∞?",
        callback_data="breakfast_price")
    )
    builder.add(types.InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
        callback_data="back_to_adult_events")
    )
    builder.adjust(1)
    return builder.as_markup()

def get_breakfast_back_keyboard():
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
        callback_data="breakfast_back")
    )
    return builder.as_markup()

def get_breakfast_why_keyboard():
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="–ê –∫–∞–∫–æ–π —Ñ–∏–ª—å–º?",
        callback_data="breakfast_film")
    )
    builder.add(types.InlineKeyboardButton(
        text="–•–æ—á—É –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è",
        callback_data="breakfast_register")
    )
    builder.add(types.InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
        callback_data="breakfast_back")
    )
    builder.adjust(1)
    return builder.as_markup()

def get_breakfast_locations_keyboard():
    builder = InlineKeyboardBuilder()
    for location in events["adult"]["–ó–∞–≤—Ç—Ä–∞–∫ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º"]["locations"].keys():
        builder.add(types.InlineKeyboardButton(
            text=location,
            callback_data=f"breakfast_loc_{location}")
        )
    builder.add(types.InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
        callback_data="breakfast_back")
    )
    builder.adjust(1)
    return builder.as_markup()

def get_breakfast_dates_keyboard(location):
    builder = InlineKeyboardBuilder()
    for date in events["adult"]["–ó–∞–≤—Ç—Ä–∞–∫ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º"]["locations"][location]:
        builder.add(types.InlineKeyboardButton(
            text=date,
            callback_data=f"breakfast_date_{date}")
        )
    builder.add(types.InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
        callback_data="breakfast_back_to_locations")
    )
    builder.adjust(1)
    return builder.as_markup()

def get_mafia_options_keyboard():
    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(
            text="–ö–æ–≥–¥–∞ –∏ –≥–¥–µ?",
            callback_data="mafia_when_where"
        )
    )
    builder.row(
        types.InlineKeyboardButton(
            text="–ê –µ—Å–ª–∏ —è –Ω–æ–≤–∏—á–æ–∫?",
            callback_data="mafia_newbie"
        )
    )
    builder.row(
        types.InlineKeyboardButton(
            text="–ó–∞–ø–∏—Å–∞—Ç—å—Å—è",
            callback_data="mafia_register"
        )
    )
    builder.row(
        types.InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data="back_to_adult_events"
        )
    )
    return builder.as_markup()

def get_mafia_newbie_keyboard():
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="–û—Ç–ª–∏—á–Ω–æ, —Ö–æ—á—É –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å!",
        callback_data="mafia_when_where")
    )
    builder.add(types.InlineKeyboardButton(
        text="–£ –º–µ–Ω—è –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã",
        callback_data="mafia_questions")
    )
    builder.add(types.InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
        callback_data="mafia_back")
    )
    builder.adjust(1)
    return builder.as_markup()

def get_mafia_locations_keyboard():
    builder = InlineKeyboardBuilder()
    for location in events["adult"]["–ú–∞—Ñ–∏—è 18+"]["locations"].keys():
        builder.add(types.InlineKeyboardButton(
            text=location,
            callback_data=f"mafia_loc_{location}"
        ))
    builder.add(types.InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
        callback_data="mafia_back"
    ))
    builder.adjust(1)
    return builder.as_markup()

def get_mafia_dates_keyboard(location):
    builder = InlineKeyboardBuilder()
    for date in events["adult"]["–ú–∞—Ñ–∏—è 18+"]["locations"][location]:
        builder.row(
            types.InlineKeyboardButton(
                text=date,
                callback_data=f"mafia_date_{date}"
            )
        )
    builder.row(
        types.InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –º–µ—Å—Ç–∞",
            callback_data="mafia_back_to_locations"
        )
    )
    return builder.as_markup()

def get_mafia_registration_keyboard():
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
        callback_data="mafia_back_to_dates")
    )
    return builder.as_markup()

def get_birthday_keyboard():
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="–°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º",
        url="https://t.me/alinarolina")
    )
    builder.add(types.InlineKeyboardButton(
        text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è",
        callback_data="child_back")
    )
    builder.adjust(1)
    return builder.as_markup()

def get_chess_keyboard():
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="–î–∞, —Ä–∞—Å—Å–∫–∞–∂–∏!",
        callback_data="chess_more")
    )
    builder.add(types.InlineKeyboardButton(
        text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è",
        callback_data="child_back")
    )
    builder.adjust(1)
    return builder.as_markup()

def get_chess_options_keyboard():
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="–ö–æ–≥–¥–∞ –ø—Ä–æ—Ö–æ–¥—è—Ç –∑–∞–Ω—è—Ç–∏—è?",
        callback_data="chess_schedule")
    )
    builder.add(types.InlineKeyboardButton(
        text="–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç?",
        callback_data="chess_price")
    )
    builder.add(types.InlineKeyboardButton(
        text="–ó–∞–ø–∏—Å–∞—Ç—å—Å—è!",
        callback_data="chess_register")
    )
    builder.add(types.InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
        callback_data="chess_back_to_main")
    )
    builder.adjust(1)
    return builder.as_markup()

def get_chess_schedule_keyboard():
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç?",
        callback_data="chess_price")
    )
    builder.add(types.InlineKeyboardButton(
        text="–ó–∞–ø–∏—Å–∞—Ç—å—Å—è!",
        callback_data="chess_register")
    )
    builder.add(types.InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
        callback_data="chess_back_to_options")
    )
    builder.adjust(1)
    return builder.as_markup()

def get_chess_price_keyboard():
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="–ó–∞–ø–∏—Å–∞—Ç—å—Å—è!",
        callback_data="chess_register")
    )
    builder.add(types.InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
        callback_data="chess_back_to_options")
    )
    builder.adjust(1)
    return builder.as_markup()

def get_chess_success_keyboard():
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        callback_data="to_main_menu")
    )
    builder.adjust(1)
    return builder.as_markup()

def get_masterclass_types_keyboard():
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="–ü–∏—Ü—Ü–∞",
        callback_data="masterclass_pizza")
    )
    builder.add(types.InlineKeyboardButton(
        text="–ì–∞–º–±—É—Ä–≥–µ—Ä—ã",
        callback_data="masterclass_burgers")
    )
    builder.add(types.InlineKeyboardButton(
        text="–ö–µ–π-–ø–æ–ø—Å—ã",
        callback_data="masterclass_cakepops")
    )
    builder.add(types.InlineKeyboardButton(
        text="–í—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã",
        callback_data="masterclass_all")
    )
    builder.add(types.InlineKeyboardButton(
        text="–ê –≥–¥–µ —ç—Ç–æ –∏ –Ω—É–∂–Ω–æ –ª–∏ —á—Ç–æ-—Ç–æ —Å —Å–æ–±–æ–π?",
        callback_data="masterclass_info")
    )
    builder.add(types.InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
        callback_data="masterclass_back")
    )
    builder.adjust(1)
    return builder.as_markup()

def get_masterclass_info_keyboard():
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="–£–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ",
        callback_data="masterclass_schedule")
    )
    builder.add(types.InlineKeyboardButton(
        text="–ó–∞–ø–∏—Å–∞—Ç—å—Å—è!",
        callback_data="masterclass_register")
    )
    builder.add(types.InlineKeyboardButton(
        text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è",
        callback_data="child_back")
    )
    builder.adjust(1)
    return builder.as_markup()

def get_masterclass_schedule_keyboard():
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="–ó–∞–ø–∏—Å–∞—Ç—å —Ä–µ–±—ë–Ω–∫–∞",
        callback_data="masterclass_register")
    )
    builder.add(types.InlineKeyboardButton(
        text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è",
        callback_data="child_back")
    )
    builder.adjust(1)
    return builder.as_markup()

def get_lectures_intro_keyboard():
    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(
            text="–î–∞, —Ä–∞—Å—Å–∫–∞–∂–∏!",
            callback_data="lectures_more"
        ),
        types.InlineKeyboardButton(
            text="–ù–µ—Ç, —Å–ø–∞—Å–∏–±–æ",
            callback_data="back_to_adult_events"
        )
    )
    return builder.as_markup()

def get_lectures_topics_keyboard():
    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(
            text="–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Ç–µ–º–∞—Ö",
            callback_data="lectures_topics"
        )
    )
    builder.row(
        types.InlineKeyboardButton(
            text="–ö–æ–≥–¥–∞ –∏ –≥–¥–µ –ø—Ä–æ—Ö–æ–¥—è—Ç –ª–µ–∫—Ü–∏–∏?",
            callback_data="lectures_when_where"
        )
    )
    builder.row(
        types.InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data="lectures_back"
        )
    )
    return builder.as_markup()

def get_lectures_when_where_keyboard():
    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(
            text="–í—ã–±—Ä–∞—Ç—å –ª–µ–∫—Ü–∏—é",
            callback_data="lectures_topics"
        ),
        types.InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data="lectures_back"
        )
    )
    return builder.as_markup()

def get_lectures_list_keyboard():
    builder = InlineKeyboardBuilder()
    for lecture_key, lecture_data in events["adult"]["–õ–µ–∫—Ü–∏–∏"]["lectures"].items():
        builder.row(
            types.InlineKeyboardButton(
                text=lecture_data["title"],
                callback_data=f"lecture_{lecture_key}"
            )
        )
    builder.row(
        types.InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data="lectures_more"
        )
    )
    return builder.as_markup()

def get_lecture_detail_keyboard(lecture_key):
    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(
            text="üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è",
            callback_data=f"lecture_register_{lecture_key}"
        )
    )
    builder.row(
        types.InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –ª–µ–∫—Ü–∏–π",
            callback_data="lectures_topics"
        )
    )
    return builder.as_markup()

def get_camp_intro_keyboard():
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="–î–∞, —Ä–∞—Å—Å–∫–∞–∂–∏!",
        callback_data="camp_more"
    ))
    builder.add(types.InlineKeyboardButton(
        text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è",
        callback_data="child_back"
    ))
    builder.adjust(1)
    return builder.as_markup()

def get_camp_options_keyboard():
    builder = InlineKeyboardBuilder()
    for camp_name, camp_data in events["child"]["–ì–æ—Ä–æ–¥—Å–∫–æ–π –ª–∞–≥–µ—Ä—å"]["camps"].items():
        builder.add(types.InlineKeyboardButton(
            text=f"{camp_name} ‚Äî {camp_data['dates']}",
            callback_data=f"camp_{camp_name.replace(' ', '_')}"
        ))
    builder.add(types.InlineKeyboardButton(
        text="‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Å–º–µ–Ω–∞—Ö",
        callback_data="camp_details"
    ))
    builder.add(types.InlineKeyboardButton(
        text="üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è",
        callback_data="camp_register"
    ))
    builder.add(types.InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –æ–ø–∏—Å–∞–Ω–∏—é",
        callback_data="camp_back_to_description"
    ))
    builder.adjust(1)
    return builder.as_markup()

def get_camp_details_keyboard():
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="–û—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, —Ö–æ—á—É —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º",
        url="https://t.me/alinarolina"
    ))
    builder.add(types.InlineKeyboardButton(
        text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Å–º–µ–Ω",
        callback_data="camp_more"
    ))
    builder.adjust(1)
    return builder.as_markup()

def get_camp_success_keyboard():
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        callback_data="to_main_menu"
    ))
    builder.adjust(1)
    return builder.as_markup()

def get_drawing_keyboard():
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="–î–∞, —Ä–∞—Å—Å–∫–∞–∂–∏!",
        callback_data="drawing_more")
    )
    builder.add(types.InlineKeyboardButton(
        text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è",
        callback_data="child_back")
    )
    builder.adjust(1)
    return builder.as_markup()

def get_drawing_options_keyboard():
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="–ö–æ–≥–¥–∞ –ø—Ä–æ—Ö–æ–¥—è—Ç –∑–∞–Ω—è—Ç–∏—è?",
        callback_data="drawing_schedule")
    )
    builder.add(types.InlineKeyboardButton(
        text="–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç?",
        callback_data="drawing_price")
    )
    builder.add(types.InlineKeyboardButton(
        text="–ó–∞–ø–∏—Å–∞—Ç—å—Å—è!",
        callback_data="drawing_register")
    )
    builder.add(types.InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
        callback_data="drawing_back_to_main")
    )
    builder.adjust(1)
    return builder.as_markup()

def get_drawing_schedule_keyboard():
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç?",
        callback_data="drawing_price")
    )
    builder.add(types.InlineKeyboardButton(
        text="–ó–∞–ø–∏—Å–∞—Ç—å—Å—è!",
        callback_data="drawing_register")
    )
    builder.add(types.InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
        callback_data="drawing_back_to_options")
    )
    builder.adjust(1)
    return builder.as_markup()

def get_drawing_price_keyboard():
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="–ó–∞–ø–∏—Å–∞—Ç—å—Å—è!",
        callback_data="drawing_register")
    )
    builder.add(types.InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
        callback_data="drawing_back_to_options")
    )
    builder.adjust(1)
    return builder.as_markup()

def get_english_keyboard():
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="–î–∞, —Ä–∞—Å—Å–∫–∞–∂–∏!",
        callback_data="english_more")
    )
    builder.add(types.InlineKeyboardButton(
        text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è",
        callback_data="child_back")
    )
    builder.adjust(1)
    return builder.as_markup()

def get_english_age_keyboard():
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="4-5 –ª–µ—Ç",
        callback_data="english_age_4_5")
    )
    builder.add(types.InlineKeyboardButton(
        text="6-7 –ª–µ—Ç",
        callback_data="english_age_6_7")
    )
    builder.add(types.InlineKeyboardButton(
        text="8-10 –ª–µ—Ç",
        callback_data="english_age_8_10")
    )
    builder.add(types.InlineKeyboardButton(
        text="–°—Ç–∞—Ä—à–µ 10 –ª–µ—Ç",
        callback_data="english_age_10+")
    )
    builder.add(types.InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
        callback_data="english_back")
    )
    builder.adjust(1)
    return builder.as_markup()

def get_english_schedule_keyboard(age_group):
    builder = InlineKeyboardBuilder()
    
    if age_group == "4‚Äì5 –ª–µ—Ç":
        builder.add(types.InlineKeyboardButton(
            text="–ó–∞–ø–∏—Å–∞—Ç—å—Å—è",
            callback_data=f"english_register_{events['child']['–ö—É—Ä—Å—ã –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞']['schedule'][age_group][0]}")
        )
    elif age_group == "6‚Äì7 –ª–µ—Ç":
        for date in events["child"]["–ö—É—Ä—Å—ã –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞"]["schedule"][age_group]:
            builder.add(types.InlineKeyboardButton(
                text=f"–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ {date}",
                callback_data=f"english_register_{date}")
            )
    elif age_group == "8‚Äì10 –ª–µ—Ç":
        builder.add(types.InlineKeyboardButton(
            text="–ó–∞–ø–∏—Å–∞—Ç—å—Å—è",
            callback_data=f"english_register_{events['child']['–ö—É—Ä—Å—ã –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞']['schedule'][age_group][0]}")
        )
    else:  # –°—Ç–∞—Ä—à–µ 10 –ª–µ—Ç
        builder.add(types.InlineKeyboardButton(
            text="–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É",
            callback_data="english_register_individual")
        )
    
    builder.add(types.InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
        callback_data="english_back_to_age")
    )
    builder.adjust(1)
    return builder.as_markup()

def get_english_success_keyboard():
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        callback_data="to_main_menu")
    )
    builder.adjust(1)
    return builder.as_markup()

def get_camp_selection_keyboard():
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —ç—Ç—É —Å–º–µ–Ω—É",
        callback_data="camp_register"
    ))
    builder.add(types.InlineKeyboardButton(
        text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É —Å–º–µ–Ω",
        callback_data="camp_more"
    ))
    builder.adjust(1)
    return builder.as_markup()

async def safe_edit_message(text: str, callback: types.CallbackQuery, reply_markup=None, state: FSMContext = None):
    try:
        await callback.message.edit_text(
            text=text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )
        await callback.answer()
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        try:
            await callback.message.answer(
                text=text,
                reply_markup=reply_markup,
                parse_mode=ParseMode.HTML
            )
            await callback.answer()
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            try:
                await callback.answer(
                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑",
                    show_alert=True
                )
            except:
                pass
            return False

async def save_user_registration(user_id: int, registration_data: dict):
    if user_id not in user_registrations:
        user_registrations[user_id] = []
    user_registrations[user_id].append(registration_data)

async def request_user_data(message: types.Message, state: FSMContext, event_type: str, instructions: str, example: str):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π"""
    await state.update_data(event_type=event_type)
    await message.answer(
        f"‚úèÔ∏è <b>–ó–∞–ø–∏—Å—å –Ω–∞ {event_type}</b>\n\n"
        f"{instructions}\n\n"
        f"<b>–ü—Ä–∏–º–µ—Ä:</b> <i>{example}</i>\n\n"
        "–ï—Å–ª–∏ –≤—ã –æ—à–∏–±–ª–∏—Å—å –ø—Ä–∏ –≤–≤–æ–¥–µ, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–Ω–æ–≤–æ.",
        parse_mode=ParseMode.HTML
    )

async def validate_and_process_registration(message: types.Message, state: FSMContext, required_fields: list):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    try:
        user_data = await state.get_data()
        user_input = message.text.strip()
        
        # –ü–∞—Ä—Å–∏–º –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        parsed_data = parse_user_data(user_input)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        errors = []
        if 'name' in required_fields and not parsed_data.get('name'):
            errors.append("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –∏–º—è")
            
        if 'phone' in required_fields and not parsed_data.get('phone'):
            errors.append("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 89123456789)")
            
        if 'age' in required_fields and not parsed_data.get('age'):
            errors.append("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç")
            
        if errors:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—à–∏–±–∫–∞–º–∏ –∏ –ø—Ä–∏–º–µ—Ä–æ–º
            example = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç"  # –î–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            
            # –ü—Ä–∏–≤–æ–¥–∏–º event_type –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–∂–¥–µ–Ω–∏–µ
            event_type = user_data.get('event_type', '').lower()
            
            if 'breakfast' in event_type:
                example = "–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω 89123456789"
            elif 'mafia' in event_type:
                example = "–ò–≤–∞–Ω 79123456789 2"
            elif 'lecture' in event_type:
                example = "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä 79123456789 1"
            
            error_msg = "\n".join(errors) + f"\n\n<b>–ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞:</b>\n<code>{example}</code>"
            await message.answer(error_msg, parse_mode=ParseMode.HTML)
            return None
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏
        registration_details = format_registration(parsed_data)
        
        return registration_details
        
    except Exception as e:
        logger.error(f"Error validating registration: {e}")
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )
        return None

@dp.message(Form.waiting_for_mafia_registration)
async def process_mafia_registration(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    text = message.text.strip()
    
    # –ü–∞—Ä—Å–∏–º –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    parts = text.split()
    if len(parts) < 3:
        await message.answer(
            "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ:\n"
            "–ò–º—è, —Ç–µ–ª–µ—Ñ–æ–Ω –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫\n\n"
            "<b>–ü—Ä–∏–º–µ—Ä:</b> <i>–ò–≤–∞–Ω 79123456789 2</i>",
            parse_mode=ParseMode.HTML
        )
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π (–ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç)
    count_str = parts[-1]
    if not count_str.isdigit():
        await message.answer(
            "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ:\n"
            "–ò–º—è, —Ç–µ–ª–µ—Ñ–æ–Ω –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫\n\n"
            "<b>–ü—Ä–∏–º–µ—Ä:</b> <i>–ò–≤–∞–Ω 79123456789 2</i>",
            parse_mode=ParseMode.HTML
        )
        return
    
    count = int(count_str)
    name = ' '.join(parts[:-2])
    phone = parts[-2]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
    phone_clean = re.sub(r'[^\d]', '', phone)
    if len(phone_clean) not in (10, 11) or not phone_clean.isdigit():
        await message.answer(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ:\n"
            "–ò–º—è, —Ç–µ–ª–µ—Ñ–æ–Ω –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫\n\n"
            "<b>–ü—Ä–∏–º–µ—Ä:</b> <i>–ò–≤–∞–Ω 79123456789 2</i>",
            parse_mode=ParseMode.HTML
        )
        return
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏
    registration_details = f"{name} {phone} {count}"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å
    registration_data = {
        "event": "–ú–∞—Ñ–∏—è 18+",
        "details": registration_details,
        "date": user_data.get("date", ""),
        "location": user_data.get("location", ""),
        "timestamp": str(datetime.now())
    }
    await save_user_registration(message.from_user.id, registration_data)
    
    await bot.send_message(
        chat_id=NOTIFY_CHAT_ID,
        text=f"üé≠ –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –Ω–∞ –ú–∞—Ñ–∏—é 18+:\n"
             f"üìÖ –î–∞—Ç–∞: {user_data.get('date', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
             f"üìç –ú–µ—Å—Ç–æ: {user_data.get('location', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
             f"üë§ –î–∞–Ω–Ω—ã–µ: {registration_details}\n"
             f"–û—Ç: @{message.from_user.username or '–Ω–µ—Ç'}",
        parse_mode=ParseMode.HTML
    )

    await message.answer(
        f"‚úÖ <b>–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –ú–∞—Ñ–∏—é 18+!</b>\n\n"
        f"üìÖ –î–∞—Ç–∞: {user_data.get('date', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
        f"üìç –ú–µ—Å—Ç–æ: {user_data.get('location', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üè† –ê–¥—Ä–µ—Å: {events['adult']['–ú–∞—Ñ–∏—è 18+']['address']}\n"
        f"üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: {events['adult']['–ú–∞—Ñ–∏—è 18+']['price']}\n\n"
        f"–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º: @alinarolina",
        parse_mode=ParseMode.HTML,
        reply_markup=get_chess_success_keyboard()
    )
    
    await state.clear()

@dp.message(Form.waiting_for_breakfast_registration)
async def process_breakfast_registration(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    registration_details = await validate_and_process_registration(
        message, state, 
        required_fields=['name', 'phone']
    )
    
    if not registration_details:
        # –û—Å—Ç–∞–µ–º—Å—è –≤ —Ç–æ–º –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ —Å–Ω–æ–≤–∞
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å
    registration_data = {
        "event": "–ó–∞–≤—Ç—Ä–∞–∫ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º",
        "details": registration_details,
        "date": user_data.get("date", ""),
        "location": user_data.get("location", ""),
        "timestamp": str(datetime.now())
    }
    await save_user_registration(message.from_user.id, registration_data)
    
    address = events["adult"]["–ó–∞–≤—Ç—Ä–∞–∫ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º"]["addresses"][user_data["location"]]
    
    await bot.send_message(
        chat_id=NOTIFY_CHAT_ID,
        text=f"‚òï –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –Ω–∞ –ó–∞–≤—Ç—Ä–∞–∫ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º:\n"
             f"üìÖ –î–∞—Ç–∞: {user_data.get('date', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
             f"üìç –ú–µ—Å—Ç–æ: {user_data.get('location', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
             f"üë§ –î–∞–Ω–Ω—ã–µ: {registration_details}\n"
             f"–û—Ç: @{message.from_user.username or '–Ω–µ—Ç'}",
        parse_mode=ParseMode.HTML
    )

    await message.answer(
        f"‚úÖ <b>–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –ó–∞–≤—Ç—Ä–∞–∫ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º!</b>\n\n"
        f"üìÖ –î–∞—Ç–∞: {user_data.get('date', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
        f"üìç –ú–µ—Å—Ç–æ: {user_data.get('location', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üè† –ê–¥—Ä–µ—Å: {address}\n"
        f"üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: {events['adult']['–ó–∞–≤—Ç—Ä–∞–∫ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º']['price']}\n\n"
        f"–§–∏–ª—å–º –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è: {events['adult']['–ó–∞–≤—Ç—Ä–∞–∫ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º']['film']}\n\n"
        f"–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º: @alinarolina",
        parse_mode=ParseMode.HTML,
        reply_markup=get_chess_success_keyboard()
    )
    
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command("start"))
async def send_welcome(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ —Ç–≤–æ–π –≥–∏–¥ –ø–æ –∫—É–ª—å—Ç—É—Ä–Ω—ã–º –∏ —Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º –†—ã–±–∞—Ü–∫–æ–≥–æ!",
        reply_markup=get_start_keyboard()
    )

# –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
@dp.callback_query(lambda c: c.data == "start")
async def process_start(callback: types.CallbackQuery, state: FSMContext):
    await safe_edit_message(
        "–ß—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
        callback,
        reply_markup=get_event_type_keyboard(),
        state=state
    )
    await state.set_state(Form.waiting_for_event)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤–∑—Ä–æ—Å–ª—ã—Ö/–¥–µ—Ç—Å–∫–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
@dp.callback_query(lambda c: c.data in ["adult", "child"], Form.waiting_for_event)
async def process_event_type(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == "adult":
        await safe_edit_message(
            "–ö–∞–∫–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
            callback,
            reply_markup=get_adult_events_keyboard(),
            state=state
        )
        await state.set_state(Form.waiting_for_event)
    else:
        await safe_edit_message(
            "–ö–∞–∫–æ–µ –¥–µ—Ç—Å–∫–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
            callback,
            reply_markup=get_child_events_keyboard(),
            state=state
        )
        await state.set_state(Form.waiting_for_event)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∑–∞–≤—Ç—Ä–∞–∫–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º
@dp.callback_query(lambda c: c.data == "breakfast", Form.waiting_for_event)
async def process_breakfast(callback: types.CallbackQuery, state: FSMContext):
    description = events["adult"]["–ó–∞–≤—Ç—Ä–∞–∫ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º"]["description"]
    await safe_edit_message(
        description,
        callback,
        reply_markup=get_breakfast_options_keyboard(),
        state=state
    )
    await state.set_state(Form.waiting_for_breakfast_option)

@dp.callback_query(lambda c: c.data.startswith("breakfast_"), Form.waiting_for_breakfast_option)
async def process_breakfast_option(callback: types.CallbackQuery, state: FSMContext):
    data = callback.data
    
    if data == "breakfast_when_where":
        await safe_edit_message(
            "–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–æ–µ –º–µ—Å—Ç–æ –≤–∞–º –±—ã–ª–æ –±—ã —É–¥–æ–±–Ω–æ:",
            callback,
            reply_markup=get_breakfast_locations_keyboard(),
            state=state
        )
        await state.set_state(Form.waiting_for_breakfast_date)
    
    elif data == "breakfast_why":
        await safe_edit_message(
            "–≠—Ç–æ —É—é—Ç–Ω–∞—è –≤—Å—Ç—Ä–µ—á–∞ –∑–∞ –≤–∫—É—Å–Ω—ã–º –∑–∞–≤—Ç—Ä–∞–∫–æ–º, –≥–¥–µ –º—ã –æ–±—Å—É–∂–¥–∞–µ–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∏–ª—å–º –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ. "
            "–û—Ç–ª–∏—á–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å —è–∑—ã–∫ –∏ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –Ω–æ–≤—ã–º–∏ –ª—é–¥—å–º–∏!",
            callback,
            reply_markup=get_breakfast_why_keyboard(),
            state=state
        )
        await state.set_state(Form.waiting_for_breakfast_question)
    
    elif data == "breakfast_register":
        await safe_edit_message(
            "–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–æ–µ –º–µ—Å—Ç–æ –≤–∞–º –±—ã–ª–æ –±—ã —É–¥–æ–±–Ω–æ:",
            callback,
            reply_markup=get_breakfast_locations_keyboard(),
            state=state
        )
        await state.set_state(Form.waiting_for_breakfast_date)
    
    elif data == "breakfast_price":
        price = events["adult"]["–ó–∞–≤—Ç—Ä–∞–∫ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º"]["price"]
        await safe_edit_message(
            f"–°—Ç–æ–∏–º–æ—Å—Ç—å —É—á–∞—Å—Ç–∏—è: {price}",
            callback,
            reply_markup=get_breakfast_back_keyboard(),
            state=state
        )
    
    elif data == "breakfast_back":
        description = events["adult"]["–ó–∞–≤—Ç—Ä–∞–∫ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º"]["description"]
        await safe_edit_message(
            description,
            callback,
            reply_markup=get_breakfast_options_keyboard(),
            state=state
        )
        await state.set_state(Form.waiting_for_breakfast_option)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –∑–∞–≤—Ç—Ä–∞–∫—É
@dp.callback_query(lambda c: c.data.startswith("breakfast_"), Form.waiting_for_breakfast_question)
async def process_breakfast_question(callback: types.CallbackQuery, state: FSMContext):
    data = callback.data
    
    if data == "breakfast_film":
        film = events["adult"]["–ó–∞–≤—Ç—Ä–∞–∫ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º"]["film"]
        await safe_edit_message(
            film,
            callback,
            reply_markup=get_breakfast_why_keyboard(),
            state=state
        )
    
    elif data == "breakfast_register":
        await safe_edit_message(
            "–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–æ–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –∏ –≤—Ä–µ–º—è –≤–∞–º –±—ã–ª–∏ –±—ã —É–¥–æ–±–Ω—ã:",
            callback,
            reply_markup=get_breakfast_locations_keyboard(),
            state=state
        )
        await state.set_state(Form.waiting_for_breakfast_date)
    
    elif data == "breakfast_back":
        description = events["adult"]["–ó–∞–≤—Ç—Ä–∞–∫ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º"]["description"]
        await safe_edit_message(
            description,
            callback,
            reply_markup=get_breakfast_options_keyboard(),
            state=state
        )
        await state.set_state(Form.waiting_for_breakfast_option)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ª–æ–∫–∞—Ü–∏–∏ –∏ –¥–∞—Ç—ã –∑–∞–≤—Ç—Ä–∞–∫–∞
@dp.callback_query(lambda c: c.data.startswith("breakfast_loc_"), Form.waiting_for_breakfast_date)
async def process_breakfast_location(callback: types.CallbackQuery, state: FSMContext):
    location = callback.data.split("_")[2]
    await state.update_data(location=location)
    await safe_edit_message(
        "–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –∏ –≤—Ä–µ–º—è:",
        callback,
        reply_markup=get_breakfast_dates_keyboard(location),
        state=state
    )

@dp.callback_query(lambda c: c.data == "breakfast_back_to_locations", Form.waiting_for_breakfast_date)
async def breakfast_back_to_locations(callback: types.CallbackQuery, state: FSMContext):
    await safe_edit_message(
        "–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–æ–µ –º–µ—Å—Ç–æ –¥–ª—è –≤–∞—Å –±—ã–ª–æ –±—ã —É–¥–æ–±–Ω–µ–µ:",
        callback,
        reply_markup=get_breakfast_locations_keyboard(),
        state=state
    )

@dp.callback_query(lambda c: c.data == "breakfast_back", Form.waiting_for_breakfast_date)
async def breakfast_back_from_locations(callback: types.CallbackQuery, state: FSMContext):
    description = events["adult"]["–ó–∞–≤—Ç—Ä–∞–∫ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º"]["description"]
    await safe_edit_message(
        description,
        callback,
        reply_markup=get_breakfast_options_keyboard(),
        state=state
    )
    await state.set_state(Form.waiting_for_breakfast_option)

@dp.callback_query(lambda c: c.data.startswith("breakfast_date_"), Form.waiting_for_breakfast_date)
async def process_breakfast_date(callback: types.CallbackQuery, state: FSMContext):
    date = callback.data.split("_")[2]
    user_data = await state.get_data()
    location = user_data["location"]
    address = events["adult"]["–ó–∞–≤—Ç—Ä–∞–∫ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º"]["addresses"][location]
    
    await state.update_data(date=date, event="–ó–∞–≤—Ç—Ä–∞–∫ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º")
    await state.set_state(Form.waiting_for_breakfast_registration)
    
    await callback.message.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏:\n"
        f"üìÖ –î–∞—Ç–∞: {date}\n"
        f"üìç –ú–µ—Å—Ç–æ: {location}\n"
        f"üè† –ê–¥—Ä–µ—Å: {address}\n\n"
        "–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:\n"
        "–§–∞–º–∏–ª–∏—é, –ò–º—è –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n\n"
        "<b>–ü—Ä–∏–º–µ—Ä:</b> <i>–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω 89123456789</i>",
        parse_mode=ParseMode.HTML,
        reply_markup=get_mafia_registration_keyboard()
    )
    await callback.answer()

@dp.message(Form.waiting_for_breakfast_registration)
async def process_breakfast_registration(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    registration_details = await validate_and_process_registration(
        message, state, 
        required_fields=['name', 'phone']
    )
    
    if not registration_details:
        return  # –û—à–∏–±–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å
    registration_data = {
        "event": "–ó–∞–≤—Ç—Ä–∞–∫ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º",
        "details": registration_details,
        "date": user_data.get("date", ""),
        "location": user_data.get("location", ""),
        "timestamp": str(datetime.now())
    }
    await save_user_registration(message.from_user.id, registration_data)
    
    address = events["adult"]["–ó–∞–≤—Ç—Ä–∞–∫ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º"]["addresses"][user_data["location"]]
    
    await bot.send_message(
        chat_id=NOTIFY_CHAT_ID,
        text=f"‚òï –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –Ω–∞ –ó–∞–≤—Ç—Ä–∞–∫ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º:\n"
             f"üìÖ –î–∞—Ç–∞: {user_data.get('date', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
             f"üìç –ú–µ—Å—Ç–æ: {user_data.get('location', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
             f"üë§ –î–∞–Ω–Ω—ã–µ: {registration_details}\n"
             f"–û—Ç: @{message.from_user.username or '–Ω–µ—Ç'}",
        parse_mode=ParseMode.HTML
    )

    await message.answer(
        f"‚úÖ <b>–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –ó–∞–≤—Ç—Ä–∞–∫ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º!</b>\n\n"
        f"üìÖ –î–∞—Ç–∞: {user_data.get('date', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
        f"üìç –ú–µ—Å—Ç–æ: {user_data.get('location', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üè† –ê–¥—Ä–µ—Å: {address}\n"
        f"üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: {events['adult']['–ó–∞–≤—Ç—Ä–∞–∫ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º']['price']}\n\n"
        f"–§–∏–ª—å–º –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è: {events['adult']['–ó–∞–≤—Ç—Ä–∞–∫ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º']['film']}\n\n"
        f"–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º: @alinarolina",
        parse_mode=ParseMode.HTML,
        reply_markup=get_chess_success_keyboard()
    )
    
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–∞—Ñ–∏–∏
@dp.callback_query(lambda c: c.data == "mafia", Form.waiting_for_event)
async def process_mafia(callback: types.CallbackQuery, state: FSMContext):
    description = events["adult"]["–ú–∞—Ñ–∏—è 18+"]["description"]
    await safe_edit_message(
        description,
        callback,
        reply_markup=get_mafia_options_keyboard(),
        state=state
    )
    await state.set_state(Form.waiting_for_mafia_option)

@dp.callback_query(lambda c: c.data.startswith("mafia_"), Form.waiting_for_mafia_option)
async def process_mafia_option(callback: types.CallbackQuery, state: FSMContext):
    data = callback.data
    
    if data == "mafia_when_where":
        await safe_edit_message(
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è:",
            callback,
            reply_markup=get_mafia_locations_keyboard(),
            state=state
        )
        await state.set_state(Form.waiting_for_mafia_locations_keyboard)
    
    elif data == "mafia_newbie":
        newbie_info = events["adult"]["–ú–∞—Ñ–∏—è 18+"]["newbie_info"]
        await safe_edit_message(
            newbie_info,
            callback,
            reply_markup=get_mafia_newbie_keyboard(),
            state=state
        )
        await state.set_state(Form.waiting_for_mafia_questions)
    
    elif data == "mafia_register":
        await safe_edit_message(
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è:",
            callback,
            reply_markup=get_mafia_locations_keyboard(),
            state=state
        )
        await state.set_state(Form.waiting_for_mafia_locations_keyboard)
    
    elif data == "mafia_back":
        description = events["adult"]["–ú–∞—Ñ–∏—è 18+"]["description"]
        await safe_edit_message(
            description,
            callback,
            reply_markup=get_mafia_options_keyboard(),
            state=state
        )
        await state.set_state(Form.waiting_for_mafia_option)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –º–∞—Ñ–∏–∏
@dp.callback_query(lambda c: c.data.startswith("mafia_"), Form.waiting_for_mafia_questions)
async def process_mafia_questions(callback: types.CallbackQuery, state: FSMContext):
    data = callback.data
    
    if data == "mafia_when_where":
        await safe_edit_message(
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è:",
            callback,
            reply_markup=get_mafia_locations_keyboard(),
            state=state
        )
        await state.set_state(Form.waiting_for_mafia_locations_keyboard)
    
    elif data == "mafia_questions":
        await callback.message.answer(
            "–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É @alinarolina\n\n"
            "–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã –¥–ª—è –∏–≥—Ä—ã:",
            reply_markup=get_mafia_locations_keyboard()
        )
        await state.set_state(Form.waiting_for_mafia_locations_keyboard)
        await callback.answer()

    elif data == "mafia_back":
        description = events["adult"]["–ú–∞—Ñ–∏—è 18+"]["description"]
        await safe_edit_message(
            description,
            callback,
            reply_markup=get_mafia_options_keyboard(),
            state=state
        )
        await state.set_state(Form.waiting_for_mafia_option)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ª–æ–∫–∞—Ü–∏–∏ –∏ –¥–∞—Ç—ã –º–∞—Ñ–∏–∏
@dp.callback_query(lambda c: c.data.startswith("mafia_loc_"), Form.waiting_for_mafia_locations_keyboard)
async def process_mafia_location(callback: types.CallbackQuery, state: FSMContext):
    location = callback.data.split("_")[2]
    await state.update_data(location=location)
    await safe_edit_message(
        "–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—É—é –¥–∞—Ç—É:",
        callback,
        reply_markup=get_mafia_dates_keyboard(location),
        state=state
    )
    await state.set_state(Form.waiting_for_mafia_date)

@dp.callback_query(lambda c: c.data == "mafia_back_to_locations", Form.waiting_for_mafia_date)
async def mafia_back_to_locations_handler(callback: types.CallbackQuery, state: FSMContext):
    await safe_edit_message(
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è:",
        callback,
        reply_markup=get_mafia_locations_keyboard(),
        state=state
    )
    await state.set_state(Form.waiting_for_mafia_locations_keyboard)

@dp.callback_query(lambda c: c.data == "mafia_back", Form.waiting_for_mafia_locations_keyboard)
async def mafia_back_to_main_options(callback: types.CallbackQuery, state: FSMContext):
    description = events["adult"]["–ú–∞—Ñ–∏—è 18+"]["description"]
    await safe_edit_message(
        description,
        callback,
        reply_markup=get_mafia_options_keyboard(),
        state=state
    )
    await state.set_state(Form.waiting_for_mafia_option)
    

@dp.callback_query(lambda c: c.data.startswith("mafia_date_"), Form.waiting_for_mafia_date)
async def process_mafia_date(callback: types.CallbackQuery, state: FSMContext):
    try:
        date = callback.data.split("_")[2]
        user_data = await state.get_data()
        location = user_data.get("location", "–õ–æ—Ñ—Ç")  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –õ–æ—Ñ—Ç
        address = events["adult"]["–ú–∞—Ñ–∏—è 18+"]["address"]
        price = events["adult"]["–ú–∞—Ñ–∏—è 18+"]["price"]
        
        await state.update_data(
            date=date,
            event="–ú–∞—Ñ–∏—è 18+",
            location=location
        )
        await state.set_state(Form.waiting_for_mafia_registration)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
        builder = InlineKeyboardBuilder()
        builder.add(types.InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data="mafia_back_to_dates")
        )
        
        await callback.message.answer(
            "üé≠ <b>–ó–∞–ø–∏—Å—å –Ω–∞ –ú–∞—Ñ–∏—é 18+</b>\n\n"
            "–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ:\n"
            "–í–∞—à–µ –∏–º—è, –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫\n\n"
            "<b>–ü—Ä–∏–º–µ—Ä:</b>\n<i>–ò–≤–∞–Ω 79123456789 2</i>",
            parse_mode=ParseMode.HTML,
            reply_markup=builder.as_markup()
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error in process_mafia_date: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

@dp.callback_query(lambda c: c.data == "mafia_back_to_dates", Form.waiting_for_mafia_registration)
async def mafia_back_to_dates_handler(callback: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    location = user_data.get("location", "–õ–æ—Ñ—Ç")
    await safe_edit_message(
        "–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—É—é –¥–∞—Ç—É:",
        callback,
        reply_markup=get_mafia_dates_keyboard(location),
        state=state
    )
    await state.set_state(Form.waiting_for_mafia_date)

@dp.message(Form.waiting_for_mafia_registration)
async def process_mafia_registration(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    text = message.text.strip()
    
    # –ü–∞—Ä—Å–∏–º –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    parts = text.split()
    if len(parts) < 3:
        await message.answer(
            "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ:\n"
            "–ò–º—è, —Ç–µ–ª–µ—Ñ–æ–Ω –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫\n\n"
            "<b>–ü—Ä–∏–º–µ—Ä:</b> <i>–ò–≤–∞–Ω 79123456789 2</i>",
            parse_mode=ParseMode.HTML
        )
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π (–ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç)
    count_str = parts[-1]
    if not count_str.isdigit():
        await message.answer(
            "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ:\n"
            "–ò–º—è, —Ç–µ–ª–µ—Ñ–æ–Ω –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫\n\n"
            "<b>–ü—Ä–∏–º–µ—Ä:</b> <i>–ò–≤–∞–Ω 79123456789 2</i>",
            parse_mode=ParseMode.HTML
        )
        return
    
    count = int(count_str)
    name = ' '.join(parts[:-2])
    phone = parts[-2]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
    phone_clean = re.sub(r'[^\d]', '', phone)
    if len(phone_clean) not in (10, 11) or not phone_clean.isdigit():
        await message.answer(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ:\n"
            "–ò–º—è, —Ç–µ–ª–µ—Ñ–æ–Ω –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫\n\n"
            "<b>–ü—Ä–∏–º–µ—Ä:</b> <i>–ò–≤–∞–Ω 79123456789 2</i>",
            parse_mode=ParseMode.HTML
        )
        return
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏
    registration_details = f"{name} {phone} {count}"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å
    registration_data = {
        "event": "–ú–∞—Ñ–∏—è 18+",
        "details": registration_details,
        "date": user_data.get("date", ""),
        "location": user_data.get("location", ""),
        "timestamp": str(datetime.now())
    }
    await save_user_registration(message.from_user.id, registration_data)
    
    await bot.send_message(
        chat_id=NOTIFY_CHAT_ID,
        text=f"üé≠ –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –Ω–∞ –ú–∞—Ñ–∏—é 18+:\n"
             f"üìÖ –î–∞—Ç–∞: {user_data.get('date', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
             f"üìç –ú–µ—Å—Ç–æ: {user_data.get('location', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
             f"üë§ –î–∞–Ω–Ω—ã–µ: {registration_details}\n"
             f"–û—Ç: @{message.from_user.username or '–Ω–µ—Ç'}",
        parse_mode=ParseMode.HTML
    )

    await message.answer(
        f"‚úÖ <b>–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –ú–∞—Ñ–∏—é 18+!</b>\n\n"
        f"üìÖ –î–∞—Ç–∞: {user_data.get('date', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
        f"üìç –ú–µ—Å—Ç–æ: {user_data.get('location', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üè† –ê–¥—Ä–µ—Å: {events['adult']['–ú–∞—Ñ–∏—è 18+']['address']}\n"
        f"üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: {events['adult']['–ú–∞—Ñ–∏—è 18+']['price']}\n\n"
        f"–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º: @alinarolina",
        parse_mode=ParseMode.HTML,
        reply_markup=get_chess_success_keyboard()
    )
    
    await state.clear()

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ª–µ–∫—Ü–∏–π
@dp.callback_query(lambda c: c.data == "lectures", Form.waiting_for_event)
async def process_lectures(callback: types.CallbackQuery, state: FSMContext):
    description = events["adult"]["–õ–µ–∫—Ü–∏–∏"]["description"]
    address = events["adult"]["–õ–µ–∫—Ü–∏–∏"]["address"]
    await safe_edit_message(
        f"{description}\n\n"
        f"–í—Å—ë –ø—Ä–æ—Ö–æ–¥–∏—Ç –≤ —É—é—Ç–Ω–æ–º –õ–æ—Ñ—Ç–µ –ø–æ –∞–¥—Ä–µ—Å—É {address}.\n"
        "–ì–æ—Ç–æ–≤—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏?",
        callback,
        reply_markup=get_lectures_intro_keyboard(),
        state=state
    )
    await state.set_state(Form.waiting_for_lecture_option)

@dp.callback_query(lambda c: c.data == "lectures_more", Form.waiting_for_lecture_option)
async def process_lectures_more(callback: types.CallbackQuery, state: FSMContext):
    lectures = events["adult"]["–õ–µ–∫—Ü–∏–∏"]["lectures"]
    lectures_text = "–í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ –≤–∞—Å –∂–¥—É—Ç —Ç—Ä–∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–µ –ª–µ–∫—Ü–∏–∏:\n\n"
    
    for i, (key, lecture) in enumerate(lectures.items(), 1):
        lectures_text += f"{i}Ô∏è‚É£ {lecture['title']}\n{lecture['description']}\n\n"
    
    await safe_edit_message(
        lectures_text,
        callback,
        reply_markup=get_lectures_topics_keyboard(),
        state=state
    )

@dp.callback_query(lambda c: c.data == "lectures_when_where", Form.waiting_for_lecture_option)
async def process_lectures_when_where(callback: types.CallbackQuery, state: FSMContext):
    address = events["adult"]["–õ–µ–∫—Ü–∏–∏"]["address"]
    await safe_edit_message(
        f"–í—Å–µ –ª–µ–∫—Ü–∏–∏ –ø—Ä–æ—Ö–æ–¥—è—Ç –≤ —É—é—Ç–Ω–æ–º –õ–æ—Ñ—Ç–µ –ø–æ –∞–¥—Ä–µ—Å—É {address} ‚Äî —Ç–µ–ø–µ—Ä—å –Ω–µ –Ω—É–∂–Ω–æ —Ç—Ä–∞—Ç–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞ –¥–æ—Ä–æ–≥—É –≤ —Ü–µ–Ω—Ç—Ä!\n\n"
        "–í—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–æ–±—â–∞—Ç—å—Å—è —Å –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–∞–º–∏ –∏–∑ —Å–≤–æ–µ–≥–æ —Ä–∞–π–æ–Ω–∞, –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã —ç–∫—Å–ø–µ—Ä—Ç–∞–º –∏ –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–µ –∑–Ω–∞–Ω–∏—è –≤ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–π –∞—Ç–º–æ—Å—Ñ–µ—Ä–µ.",
        callback,
        reply_markup=get_lectures_when_where_keyboard(),
        state=state
    )

@dp.callback_query(lambda c: c.data == "lectures_topics", Form.waiting_for_lecture_option)
async def process_lectures_topics(callback: types.CallbackQuery, state: FSMContext):
    await safe_edit_message(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å –ª–µ–∫—Ü–∏—é, –∏ —è –ø—Ä–∏—à–ª—é –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –ø–æ–º–æ–≥—É —Å—Ä–∞–∑—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è!",
        callback,
        reply_markup=get_lectures_list_keyboard(),
        state=state
    )

@dp.callback_query(lambda c: c.data.startswith("lecture_"), Form.waiting_for_lecture_option)
async def process_lecture_detail(callback: types.CallbackQuery, state: FSMContext):
    try:
        parts = callback.data.split('_')
        
        if len(parts) < 2:
            await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
            return

        lecture_key = parts[-1]
        
        if lecture_key not in events["adult"]["–õ–µ–∫—Ü–∏–∏"]["lectures"]:
            await callback.answer("–õ–µ–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        lecture = events["adult"]["–õ–µ–∫—Ü–∏–∏"]["lectures"][lecture_key]

        if "register" in callback.data:
            await state.update_data(
                event=f"–õ–µ–∫—Ü–∏—è: {lecture['title']}",
                lecture_key=lecture_key
            )
            await state.set_state(Form.waiting_for_lecture_registration)
            
            await callback.message.answer(
                "‚úèÔ∏è <b>–ó–∞–ø–∏—Å—å –Ω–∞ –ª–µ–∫—Ü–∏—é</b>\n\n"
                "–ß—Ç–æ–±—ã –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –º–µ—Å—Ç–æ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ:\n"
                "–í–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é, –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫\n"
                "*—Å—É–º–º–∞ —É–∫–∞–∑–∞–Ω–∞ –∑–∞ –æ–¥–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞\n\n"
                "<b>–ù–∞–ø—Ä–∏–º–µ—Ä:</b>\n<i>–ê–ª–µ–∫—Å–∞–Ω–¥—Ä 79123456789 1</i>",
                parse_mode=ParseMode.HTML
                    )


            await callback.answer()
        else:
            await safe_edit_message(
                f"üìö <b>{lecture['title']}</b>\n\n"
                f"{lecture['description']}\n\n"
                f"üìÖ <b>–î–∞—Ç–∞:</b> {lecture['date']}\n"
                f"‚è∞ <b>–í—Ä–µ–º—è:</b> {lecture.get('time', '—É—Ç–æ—á–Ω—è–µ—Ç—Å—è')}\n"
                f"üè† <b>–ê–¥—Ä–µ—Å:</b> {events['adult']['–õ–µ–∫—Ü–∏–∏']['address']}\n"
                f"üíµ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {events['adult']['–õ–µ–∫—Ü–∏–∏']['price']}",
                callback,
                reply_markup=get_lecture_detail_keyboard(lecture_key),
                state=state
            )
    except Exception as e:
        logger.error(f"Error in process_lecture_detail: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message(Form.waiting_for_lecture_registration)
async def process_lecture_registration(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    registration_details = await validate_and_process_registration(
        message, state,
        required_fields=['name', 'phone']
    )
    
    if not registration_details:
        return

    lecture_key = user_data.get("lecture_key")
    if not lecture_key:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –ª–µ–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        await state.clear()
        return

    lecture = events["adult"]["–õ–µ–∫—Ü–∏–∏"]["lectures"][lecture_key]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å
    registration_data = {
        "event": f"–õ–µ–∫—Ü–∏—è: {lecture['title']}",
        "details": registration_details,
        "date": lecture['date'],
        "timestamp": str(datetime.now())
    }
    await save_user_registration(message.from_user.id, registration_data)

    await bot.send_message(
        chat_id=NOTIFY_CHAT_ID,
        text=f"üìö –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –Ω–∞ –ª–µ–∫—Ü–∏—é:\n"
             f"–¢–µ–º–∞: {lecture['title']}\n"
             f"–î–∞—Ç–∞: {lecture['date']}\n"
             f"–î–∞–Ω–Ω—ã–µ: {registration_details}\n"
             f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}",
        parse_mode=ParseMode.HTML
    )

    await message.answer(
        f"‚úÖ <b>–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –ª–µ–∫—Ü–∏—é!</b>\n\n"
        f"üìö <b>–¢–µ–º–∞:</b> {lecture['title']}\n"
        f"üìÖ <b>–î–∞—Ç–∞:</b> {lecture['date']}\n"
        f"üè† <b>–ê–¥—Ä–µ—Å:</b> {events['adult']['–õ–µ–∫—Ü–∏–∏']['address']}\n"
        f"üíµ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {events['adult']['–õ–µ–∫—Ü–∏–∏']['price']}\n\n"
        f"–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º: @alinarolina",
        parse_mode=ParseMode.HTML,
        reply_markup=get_chess_success_keyboard()
    )
    
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ —à–∫–æ–ª–µ
@dp.callback_query(lambda c: c.data == "child_–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞_–∫_—à–∫–æ–ª–µ")
async def process_school_prep(callback: types.CallbackQuery, state: FSMContext):
    await safe_edit_message(
        "–í –Ω–∞—à–µ–º —Ü–µ–Ω—Ç—Ä–µ –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è –ª–µ—Ç–Ω—è—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —à–∫–æ–ª–µ. –ì–æ—Ç–æ–≤ —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏?",
        callback,
        reply_markup=get_school_prep_keyboard(),
        state=state
    )
    await state.set_state(Form.waiting_for_school_prep_option)

@dp.callback_query(lambda c: c.data == "school_prep_yes", Form.waiting_for_school_prep_option)
async def process_school_prep_yes(callback: types.CallbackQuery, state: FSMContext):
    prep_data = events["child"]["–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —à–∫–æ–ª–µ"]
    await safe_edit_message(
        f"{prep_data['details']}\n"
        f"{prep_data['price']}",
        callback,
        reply_markup=get_school_prep_details_keyboard(),
        state=state
    )

@dp.callback_query(lambda c: c.data == "school_prep_register", Form.waiting_for_school_prep_option)
async def process_school_prep_register(callback: types.CallbackQuery, state: FSMContext):
    await safe_edit_message(
        "–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è:",
        callback,
        reply_markup=get_school_prep_schedule_keyboard(),
        state=state
    )

@dp.callback_query(lambda c: c.data in ["school_prep_wed", "school_prep_sat"], Form.waiting_for_school_prep_option)
async def process_school_prep_time(callback: types.CallbackQuery, state: FSMContext):
    time = "–°—Ä–µ–¥–∞ 17:00" if callback.data == "school_prep_wed" else "–°—É–±–±–æ—Ç–∞ 18:00"
    await state.update_data(event="–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —à–∫–æ–ª–µ", time=time)
    await callback.message.answer(
        "–î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –∫ —à–∫–æ–ª–µ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ:\n"
        "1. –ò–º—è –∏ –≤–æ–∑—Ä–∞—Å—Ç —Ä–µ–±–µ–Ω–∫–∞\n"
        "2. –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n\n"
        "<b>–ü—Ä–∏–º–µ—Ä:</b> <i>–ê–ª–µ–∫—Å–µ–π 6 –ª–µ—Ç 89123456789</i>",
        parse_mode=ParseMode.HTML
    )
    await state.set_state(Form.waiting_for_school_prep_registration)

@dp.message(Form.waiting_for_school_prep_registration)
async def process_school_prep_data(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    registration_details = await validate_and_process_registration(
        message, state,
        required_fields=['name', 'phone', 'age']
    )
    
    if not registration_details:
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å
    registration_data = {
        "event": "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —à–∫–æ–ª–µ",
        "details": registration_details,
        "time": user_data.get("time", ""),
        "timestamp": str(datetime.now())
    }
    await save_user_registration(message.from_user.id, registration_data)

    await bot.send_message(
        chat_id=NOTIFY_CHAT_ID,
        text=f"üìö –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –Ω–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –∫ —à–∫–æ–ª–µ:\n"
             f"‚è∞ –í—Ä–µ–º—è: {user_data.get('time', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
             f"üë∂ –î–∞–Ω–Ω—ã–µ: {registration_details}\n"
             f"üë§ –û—Ç: @{message.from_user.username or '–Ω–µ—Ç'}",
        parse_mode=ParseMode.HTML
    )

    prep_data = events["child"]["–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —à–∫–æ–ª–µ"]
    await message.answer(
        f"‚úÖ <b>–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –∫ —à–∫–æ–ª–µ!</b>\n\n"
        f"‚è∞ –í—Ä–µ–º—è: {user_data.get('time', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üè† –ê–¥—Ä–µ—Å: {prep_data['address']}\n"
        f"üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: {prep_data['price']}\n\n"
        f"–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º: @alinarolina",
        parse_mode=ParseMode.HTML,
        reply_markup=get_school_prep_success_keyboard()
    )
    
    await state.clear()
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥–µ—Ç—Å–∫–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
@dp.callback_query(lambda c: c.data.startswith("child_"))
async def process_child_event(callback: types.CallbackQuery, state: FSMContext):
    event_name = callback.data.replace("child_", "").replace("_", " ")
    
    if event_name == "–î–µ—Ç—Å–∫–∏–π –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è":
        await state.set_state(Form.waiting_for_birthday_option)
        await safe_edit_message(
            f"{events['child']['–î–µ—Ç—Å–∫–∏–π –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è']['details']}\n\n"
            f"{events['child']['–î–µ—Ç—Å–∫–∏–π –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è']['additional_info']}",
            callback,
            reply_markup=get_birthday_keyboard(),
            state=state
        )
    elif event_name == "–ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å –≤ –ß–∞—á–µ":
        await state.set_state(Form.waiting_for_masterclass_option)
        await safe_edit_message(
            f"{events['child']['–ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å –≤ –ß–∞—á–µ']['description']}\n"
            f"{events['child']['–ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å –≤ –ß–∞—á–µ']['details']}\n"
            "–ì–æ—Ç–æ–≤—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏?",
            callback,
            reply_markup=get_chess_keyboard(),
            state=state
        )
    elif event_name == "–®–∞—Ö–º–∞—Ç—ã":
        await state.set_state(Form.waiting_for_chess_option)
        await safe_edit_message(
            f"{events['child']['–®–∞—Ö–º–∞—Ç—ã']['description']}\n"
            f"{events['child']['–®–∞—Ö–º–∞—Ç—ã']['details']}\n"
            "–ì–æ—Ç–æ–≤—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏?",
            callback,
            reply_markup=get_chess_keyboard(),
            state=state
        )
    elif event_name == "–†–∏—Å–æ–≤–∞–Ω–∏–µ":
        await state.set_state(Form.waiting_for_drawing_option)
        await safe_edit_message(
            f"{events['child']['–†–∏—Å–æ–≤–∞–Ω–∏–µ']['description']}\n"
            f"{events['child']['–†–∏—Å–æ–≤–∞–Ω–∏–µ']['details']}\n"
            f"–í—Å—Ç—Ä–µ—á–∞–µ–º—Å—è –≤ —É—é—Ç–Ω–æ–º —Ü–µ–Ω—Ç—Ä–µ CoolKids –ø–æ –∞–¥—Ä–µ—Å—É {events['child']['–†–∏—Å–æ–≤–∞–Ω–∏–µ']['address']} ‚Äî –≤—Å—ë –ª–µ—Ç–æ!\n"
            "–ì–æ—Ç–æ–≤—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏?",
            callback,
            reply_markup=get_drawing_keyboard(),
            state=state
        )
    elif event_name == "–ì–æ—Ä–æ–¥—Å–∫–æ–π –ª–∞–≥–µ—Ä—å":
        await state.set_state(Form.waiting_for_camp_option)
        await safe_edit_message(
            f"{events['child']['–ì–æ—Ä–æ–¥—Å–∫–æ–π –ª–∞–≥–µ—Ä—å']['description']}\n"
            f"{events['child']['–ì–æ—Ä–æ–¥—Å–∫–æ–π –ª–∞–≥–µ—Ä—å']['details']}\n"
            "–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏?",
            callback,
            reply_markup=get_camp_intro_keyboard(),
            state=state
        )
    elif event_name == "–ö—É—Ä—Å—ã –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞":
        await state.set_state(Form.waiting_for_english_option)
        description = events["child"]["–ö—É—Ä—Å—ã –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞"]["description"]
        details = events["child"]["–ö—É—Ä—Å—ã –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞"]["details"]
        await safe_edit_message(
            f"{description}\n{details}\n–ì–æ—Ç–æ–≤—ã —É–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â—É—é –≥—Ä—É–ø–ø—É?",
            callback,
            reply_markup=get_english_keyboard(),
            state=state
        )
    else:
        await safe_edit_message(
            "–ö–∞–∫–æ–µ –¥–µ—Ç—Å–∫–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
            callback,
            reply_markup=get_child_events_keyboard(),
            state=state
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–æ–≤
@dp.callback_query(lambda c: c.data == "chess_more", Form.waiting_for_masterclass_option)
async def process_masterclass_more(callback: types.CallbackQuery, state: FSMContext):
    await safe_edit_message(
        "–ù–∞ –Ω–∞—à–∏—Ö –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–∞—Ö –¥–µ—Ç–∏ —Å–∞–º–∏ –≥–æ—Ç–æ–≤—è—Ç –ø–∏—Ü—Ü—É, —Å–æ—á–Ω—ã–µ –≥–∞–º–±—É—Ä–≥–µ—Ä—ã –∏–ª–∏ —è—Ä–∫–∏–µ –∫–µ–π-–ø–æ–ø—Å—ã –ø–æ–¥ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ–º –æ–ø—ã—Ç–Ω–æ–≥–æ —à–µ—Ñ–∞!\n"
        "–≠—Ç–æ –Ω–µ —Ç–æ–ª—å–∫–æ –≤–∫—É—Å–Ω–æ, –Ω–æ –∏ –æ—á–µ–Ω—å –≤–µ—Å–µ–ª–æ: –∏–≥—Ä—ã, –∫–æ–Ω–∫—É—Ä—Å—ã, —Ñ–æ—Ç–æ –∏, –∫–æ–Ω–µ—á–Ω–æ, –¥–µ–≥—É—Å—Ç–∞—Ü–∏—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö —à–µ–¥–µ–≤—Ä–æ–≤!\n\n"
        "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –∫–∞–∫–æ–π –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è –≤–∞—à–µ–º—É —Ä–µ–±—ë–Ω–∫—É –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ?",
        callback,
        reply_markup=get_masterclass_types_keyboard(),
        state=state
    )
    await state.set_state(Form.waiting_for_masterclass_type)

@dp.callback_query(lambda c: c.data.startswith("masterclass_"), Form.waiting_for_masterclass_type)
async def process_masterclass_type(callback: types.CallbackQuery, state: FSMContext):
    data = callback.data
    
    if data == "masterclass_pizza":
        await safe_edit_message(
            events["child"]["–ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å –≤ –ß–∞—á–µ"]["options"]["–ü–∏—Ü—Ü–∞"],
            callback,
            reply_markup=get_masterclass_types_keyboard(),
            state=state
        )
    
    elif data == "masterclass_burgers":
        await safe_edit_message(
            events["child"]["–ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å –≤ –ß–∞—á–µ"]["options"]["–ì–∞–º–±—É—Ä–≥–µ—Ä—ã"],
            callback,
            reply_markup=get_masterclass_types_keyboard(),
            state=state
        )
    
    elif data == "masterclass_cakepops":
        await safe_edit_message(
            events["child"]["–ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å –≤ –ß–∞—á–µ"]["options"]["–ö–µ–π-–ø–æ–ø—Å—ã"],
            callback,
            reply_markup=get_masterclass_types_keyboard(),
            state=state
        )
    
    elif data == "masterclass_all":
        await safe_edit_message(
            "–ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã –¥–ª—è –¥–µ—Ç–µ–π —Ä–∞–∑–Ω–æ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞!\n\n"
            "‚Ä¢ –ü–∏—Ü—Ü–∞ - –¥–µ—Ç–∏ —É—á–∞—Ç—Å—è –≥–æ—Ç–æ–≤–∏—Ç—å –Ω–∞—Å—Ç–æ—è—â—É—é –ø–∏—Ü—Ü—É —Å —Ä–∞–∑–Ω—ã–º–∏ –Ω–∞—á–∏–Ω–∫–∞–º–∏\n"
            "‚Ä¢ –ì–∞–º–±—É—Ä–≥–µ—Ä—ã - –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å –ø–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—é —Å–æ—á–Ω—ã—Ö –±—É—Ä–≥–µ—Ä–æ–≤\n"
            "‚Ä¢ –ö–µ–π-–ø–æ–ø—Å—ã - —è—Ä–∫–∏–µ –∏ –≤–∫—É—Å–Ω—ã–µ –∫–µ–π-–ø–æ–ø—Å—ã - –ª—é–±–∏–º–æ–µ –ª–∞–∫–æ–º—Å—Ç–≤–æ –¥–µ—Ç–µ–π\n\n"
            "–í—Å–µ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã –ø—Ä–æ—Ö–æ–¥—è—Ç –≤ —É—é—Ç–Ω–æ–π –∞—Ç–º–æ—Å—Ñ–µ—Ä–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ ¬´–ß–∞—á–∞¬ª!",
            callback,
            reply_markup=get_masterclass_types_keyboard(),
            state=state
        )
    
    elif data == "masterclass_info":
        await safe_edit_message(
            events["child"]["–ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å –≤ –ß–∞—á–µ"]["info"],
            callback,
            reply_markup=get_masterclass_info_keyboard(),
            state=state
        )
        await state.set_state(Form.waiting_for_masterclass_info)
    
    elif data == "masterclass_back":
        await safe_edit_message(
            "–ö–∞–∫–æ–µ –¥–µ—Ç—Å–∫–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
            callback,
            reply_markup=get_child_events_keyboard(),
            state=state
        )
        await state.set_state(Form.waiting_for_event)

@dp.callback_query(lambda c: c.data.startswith("masterclass_"), Form.waiting_for_masterclass_info)
async def process_masterclass_info(callback: types.CallbackQuery, state: FSMContext):
    data = callback.data
    
    if data == "masterclass_schedule":
        schedule = events["child"]["–ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å –≤ –ß–∞—á–µ"]["schedule"]
        price = events["child"]["–ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å –≤ –ß–∞—á–µ"]["price"]
        address = events["child"]["–ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å –≤ –ß–∞—á–µ"]["address"]
        
        schedule_text = "–ë–ª–∏–∂–∞–π—à–∏–µ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã:\n"
        for mc_type, date in schedule.items():
            schedule_text += f"‚Ä¢ {mc_type} ‚Äî {date}\n"
        
        await safe_edit_message(
            f"{schedule_text}\n"
            f"–ú–µ—Å—Ç–æ: —Ä–µ—Å—Ç–æ—Ä–∞–Ω ¬´–ß–∞—á–∞¬ª ({address})\n"
            f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {price} –∑–∞ —Ä–µ–±—ë–Ω–∫–∞.\n\n"
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ!",
            callback,
            reply_markup=get_masterclass_schedule_keyboard(),
            state=state
        )
        await state.set_state(Form.waiting_for_masterclass_schedule)
    
    elif data == "masterclass_register":
        await state.set_state(Form.waiting_for_masterclass_registration)
        await callback.message.answer(
            "–î–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Å—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ:\n"
            "‚Ä¢ –ò–º—è –∏ –≤–æ–∑—Ä–∞—Å—Ç —Ä–µ–±—ë–Ω–∫–∞\n"
            "‚Ä¢ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n"
            "‚Ä¢ –ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å (–ø–∏—Ü—Ü–∞, –≥–∞–º–±—É—Ä–≥–µ—Ä—ã –∏–ª–∏ –∫–µ–π-–ø–æ–ø—Å—ã)\n\n"
            "<b>–ü—Ä–∏–º–µ—Ä:</b> <i>–ê–ª–µ–∫—Å–µ–π 10 –ª–µ—Ç 89123456789 –ø–∏—Ü—Ü–∞</i>",
            parse_mode=ParseMode.HTML
        )
        await callback.answer()
    
    elif data == "child_back":
        await safe_edit_message(
            "–ö–∞–∫–æ–µ –¥–µ—Ç—Å–∫–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
            callback,
            reply_markup=get_child_events_keyboard(),
            state=state
        )
        await state.set_state(Form.waiting_for_event)

@dp.callback_query(lambda c: c.data.startswith("masterclass_"), Form.waiting_for_masterclass_schedule)
async def process_masterclass_schedule(callback: types.CallbackQuery, state: FSMContext):
    data = callback.data
    
    if data == "masterclass_register":
        await state.set_state(Form.waiting_for_masterclass_registration)
        await callback.message.answer(
            "–î–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Å—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ:\n"
            "‚Ä¢ –ò–º—è –∏ –≤–æ–∑—Ä–∞—Å—Ç —Ä–µ–±—ë–Ω–∫–∞\n"
            "‚Ä¢ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n"
            "‚Ä¢ –ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å (–ø–∏—Ü—Ü–∞, –≥–∞–º–±—É—Ä–≥–µ—Ä—ã –∏–ª–∏ –∫–µ–π-–ø–æ–ø—Å—ã)\n\n"
            "<b>–ü—Ä–∏–º–µ—Ä:</b> <i>–ê–ª–µ–∫—Å–µ–π 10 –ª–µ—Ç 89123456789 –ø–∏—Ü—Ü–∞</i>",
            parse_mode=ParseMode.HTML
        )
        await callback.answer()
    
    elif data == "child_back":
        await safe_edit_message(
            "–ö–∞–∫–æ–µ –¥–µ—Ç—Å–∫–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
            callback,
            reply_markup=get_child_events_keyboard(),
            state=state
        )
        await state.set_state(Form.waiting_for_event)

@dp.message(Form.waiting_for_masterclass_registration)
async def process_masterclass_registration(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    registration_details = await validate_and_process_registration(
        message, state,
        required_fields=['name', 'phone', 'age']
    )
    
    if not registration_details:
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–∞
    mc_types = ["–ø–∏—Ü—Ü–∞", "–≥–∞–º–±—É—Ä–≥–µ—Ä—ã", "–∫–µ–π-–ø–æ–ø—Å—ã"]
    mc_type = None
    for t in mc_types:
        if t in message.text.lower():
            mc_type = t
            break
    
    if not mc_type:
        await message.answer("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω —Ç–∏–ø –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ: –ø–∏—Ü—Ü–∞, –≥–∞–º–±—É—Ä–≥–µ—Ä—ã –∏–ª–∏ –∫–µ–π-–ø–æ–ø—Å—ã")
        return
    
    registration_details += f" {mc_type}"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å
    registration_data = {
        "event": f"–ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å: {mc_type.capitalize()}",
        "details": registration_details,
        "timestamp": str(datetime.now())
    }
    await save_user_registration(message.from_user.id, registration_data)

    await bot.send_message(
        chat_id=NOTIFY_CHAT_ID,
        text=f"üë®‚Äçüç≥ –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –Ω–∞ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å ({mc_type.capitalize()}):\n"
             f"üë∂ –†–µ–±–µ–Ω–æ–∫: {registration_details}\n"
             f"üë§ –û—Ç: @{message.from_user.username or '–Ω–µ—Ç'}",
        parse_mode=ParseMode.HTML
    )

    mc_data = events["child"]["–ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å –≤ –ß–∞—á–µ"]
    await message.answer(
        f"‚úÖ <b>–ó–∞–ø–∏—Å—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!</b>\n\n"
        f"üë®‚Äçüç≥ –ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å: {mc_type.capitalize()}\n"
        f"üè† –ê–¥—Ä–µ—Å: {mc_data['address']}\n"
        f"üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: {mc_data['price']}\n\n"
        f"–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º: @alinarolina",
        parse_mode=ParseMode.HTML,
        reply_markup=get_chess_success_keyboard()
    )
    
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —à–∞—Ö–º–∞—Ç
@dp.callback_query(lambda c: c.data == "chess_more", Form.waiting_for_chess_option)
async def process_chess_more(callback: types.CallbackQuery, state: FSMContext):
    await safe_edit_message(
        "–®–∞—Ö–º–∞—Ç—ã ‚Äî —ç—Ç–æ –Ω–µ —Ç–æ–ª—å–∫–æ –≤–µ—Å–µ–ª–æ, –Ω–æ –∏ –ø–æ–ª–µ–∑–Ω–æ!\n"
        "–†–µ–±—è—Ç–∞ —É—á–∞—Ç—Å—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏ –º—ã—Å–ª–∏—Ç—å, –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ä–µ—à–µ–Ω–∏—è –∏ –Ω–∞—Ö–æ–¥–∏—Ç—å –Ω–æ–≤—ã—Ö –¥—Ä—É–∑–µ–π.\n"
        "–ù–∞—à–∏ –≤—Å—Ç—Ä–µ—á–∏ –ø—Ä–æ—Ö–æ–¥—è—Ç –≤ —É—é—Ç–Ω–æ–º —Ü–µ–Ω—Ç—Ä–µ CoolKids –ø–æ –∞–¥—Ä–µ—Å—É –†—ã–±–∞—Ü–∫–∏–π –ø—Ä-—Ç 23/2.\n"
        "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞–º —ç—Ç–∏–º –ª–µ—Ç–æ–º!",
        callback,
        reply_markup=get_chess_options_keyboard(),
        state=state
    )

@dp.callback_query(lambda c: c.data == "chess_back_to_main", Form.waiting_for_chess_option)
async def chess_back_to_main(callback: types.CallbackQuery, state: FSMContext):
    description = events["child"]["–®–∞—Ö–º–∞—Ç—ã"]["description"]
    details = events["child"]["–®–∞—Ö–º–∞—Ç—ã"]["details"]
    await safe_edit_message(
        f"{description}\n{details}\n–ì–æ—Ç–æ–≤—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏?",
        callback,
        reply_markup=get_chess_keyboard(),
        state=state
    )
    await state.set_state(Form.waiting_for_chess_option)

@dp.callback_query(lambda c: c.data == "chess_back_to_options", Form.waiting_for_chess_option)
async def chess_back_to_options(callback: types.CallbackQuery, state: FSMContext):
    await process_chess_more(callback, state)

@dp.callback_query(lambda c: c.data == "chess_schedule", Form.waiting_for_chess_option)
async def process_chess_schedule(callback: types.CallbackQuery, state: FSMContext):
    schedule = events["child"]["–®–∞—Ö–º–∞—Ç—ã"]["schedule"]
    await safe_edit_message(
        f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π:\n{schedule}",
        callback,
        reply_markup=get_chess_schedule_keyboard(),
        state=state
    )

@dp.callback_query(lambda c: c.data == "chess_price", Form.waiting_for_chess_option)
async def process_chess_price(callback: types.CallbackQuery, state: FSMContext):
    price = events["child"]["–®–∞—Ö–º–∞—Ç—ã"]["price"]
    await safe_edit_message(
        f"–°—Ç–æ–∏–º–æ—Å—Ç—å —É—á–∞—Å—Ç–∏—è ‚Äî {price}.\n"
        "–í—Å—ë –≤–∫–ª—é—á–µ–Ω–æ: –¥–æ—Å–∫–∏, —Ñ–∏–≥—É—Ä—ã, –¥—Ä—É–∂–µ–ª—é–±–Ω–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ç—Ä–µ–Ω–µ—Ä–∞!",
        callback,
        reply_markup=get_chess_price_keyboard(),
        state=state
    )

@dp.callback_query(lambda c: c.data == "chess_register", Form.waiting_for_chess_option)
async def chess_register_handler(callback: types.CallbackQuery, state: FSMContext):
    try:
        await state.set_state(Form.waiting_for_chess_data)
        await callback.message.answer(
            "‚ôüÔ∏è –î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —à–∞—Ö–º–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ—á–∫—É: \n"
            "‚Ä¢ –ò–º—è –∏ –≤–æ–∑—Ä–∞—Å—Ç —Ä–µ–±–µ–Ω–∫–∞, –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è (17:00 –∏–ª–∏ 18:00)\n"
            "<b>–ü—Ä–∏–º–µ—Ä:</b> <i>–ê–ª–µ–∫—Å–µ–π 10 –ª–µ—Ç 89123456789 17:00</i>",
            parse_mode=ParseMode.HTML
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"Error in chess_register_handler: {e}")
        await callback.answer("–û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ", show_alert=True)

@dp.message(Form.waiting_for_chess_data)
async def process_chess_data(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    registration_details = await validate_and_process_registration(
        message, state,
        required_fields=['name', 'phone', 'age']
    )
    
    if not registration_details:
        # –û—Å—Ç–∞–µ–º—Å—è –≤ —Ç–æ–º –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        return
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
    time_match = re.search(r'(17|18)(?::00)?', message.text)
    if not time_match:
        await message.answer("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–æ –≤—Ä–µ–º—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ 17:00 –∏–ª–∏ 18:00")
        return
    
    time = time_match.group().replace(':00', '')
    registration_details += f" {time}:00"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å
    registration_data = {
        "event": "–®–∞—Ö–º–∞—Ç—ã",
        "details": registration_details,
        "timestamp": str(datetime.now())
    }
    await save_user_registration(message.from_user.id, registration_data)

    await bot.send_message(
        chat_id=NOTIFY_CHAT_ID,
        text=f"‚ôüÔ∏è –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –Ω–∞ –®–∞—Ö–º–∞—Ç—ã:\n"
             f"üë∂ –†–µ–±–µ–Ω–æ–∫: {registration_details}\n"
             f"üë§ –û—Ç: @{message.from_user.username or '–Ω–µ—Ç'}",
        parse_mode=ParseMode.HTML
    )

    chess_data = events["child"]["–®–∞—Ö–º–∞—Ç—ã"]
    await message.answer(
        f"‚úÖ <b>–ó–∞–ø–∏—Å—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!</b>\n\n"
        f"‚ôüÔ∏è –®–∞—Ö–º–∞—Ç—ã –≤ {time}:00\n"
        f"üè† –ê–¥—Ä–µ—Å: {chess_data['address']}\n"
        f"üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: {chess_data['price']}\n\n"
        f"–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º: @alinarolina",
        parse_mode=ParseMode.HTML,
        reply_markup=get_chess_success_keyboard()
    )
    
    await state.clear()

@dp.callback_query(lambda c: c.data == "child_–ì–æ—Ä–æ–¥—Å–∫–æ–π_–ª–∞–≥–µ—Ä—å")
async def process_camp(callback: types.CallbackQuery, state: FSMContext):
    description = events["child"]["–ì–æ—Ä–æ–¥—Å–∫–æ–π –ª–∞–≥–µ—Ä—å"]["description"]
    details = events["child"]["–ì–æ—Ä–æ–¥—Å–∫–æ–π –ª–∞–≥–µ—Ä—å"]["details"]
    await safe_edit_message(
        f"{description}\n{details}\n–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏?",
        callback,
        reply_markup=get_camp_intro_keyboard(),
        state=state
    )
    await state.set_state(Form.waiting_for_camp_option)

@dp.callback_query(lambda c: c.data == "camp_more", Form.waiting_for_camp_option)
async def process_camp_more(callback: types.CallbackQuery, state: FSMContext):
    camps = events["child"]["–ì–æ—Ä–æ–¥—Å–∫–æ–π –ª–∞–≥–µ—Ä—å"]["camps"]
    camps_text = "–í —ç—Ç–æ–º –≥–æ–¥—É –º—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ 6 —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å–º–µ–Ω ‚Äî –∫–∞–∂–¥—ã–π —Ä–µ–±—ë–Ω–æ–∫ –Ω–∞–π–¥—ë—Ç —Å–µ–±–µ –∑–∞–Ω—è—Ç–∏–µ –ø–æ –¥—É—à–µ!\n\n"
    
    for camp_name, camp_data in camps.items():
        camps_text += f"‚Ä¢ {camp_name} ‚Äî {camp_data['dates']}\n"
    
    await safe_edit_message(
        camps_text,
        callback,
        reply_markup=get_camp_options_keyboard(),
        state=state
    )

@dp.callback_query(lambda c: c.data.startswith("camp_") and not c.data in ["camp_more", "camp_details", "camp_register", "camp_back_to_description"], Form.waiting_for_camp_option)
async def process_camp_selection(callback: types.CallbackQuery, state: FSMContext):
    camp_name = callback.data.replace("camp_", "").replace("_", " ")
    camp_data = events["child"]["–ì–æ—Ä–æ–¥—Å–∫–æ–π –ª–∞–≥–µ—Ä—å"]["camps"].get(camp_name)
    
    if camp_data:
        await state.update_data(camp_name=camp_name)
        await safe_edit_message(
            f"üèïÔ∏è <b>{camp_name} ({camp_data['dates']})</b>\n\n"
            f"{camp_data['description']}\n\n"
            f"üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å —Å–º–µ–Ω—ã: {events['child']['–ì–æ—Ä–æ–¥—Å–∫–æ–π –ª–∞–≥–µ—Ä—å']['price']}\n"
            f"üè† –ê–¥—Ä–µ—Å: {events['child']['–ì–æ—Ä–æ–¥—Å–∫–æ–π –ª–∞–≥–µ—Ä—å']['address']}",
            callback,
            reply_markup=get_camp_selection_keyboard(),
            state=state
        )

@dp.callback_query(lambda c: c.data == "camp_details", Form.waiting_for_camp_option)
async def process_camp_details(callback: types.CallbackQuery, state: FSMContext):
    info = events["child"]["–ì–æ—Ä–æ–¥—Å–∫–æ–π –ª–∞–≥–µ—Ä—å"]["info"]
    await safe_edit_message(
        f"<b>–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Å–º–µ–Ω–∞—Ö:</b>\n\n"
        f"–ö–∞–∂–¥–∞—è —Å–º–µ–Ω–∞ –≤–∫–ª—é—á–∞–µ—Ç:\n"
        f"‚Ä¢ –ü—Ä–µ–±—ã–≤–∞–Ω–∏–µ –≤ —Ü–µ–Ω—Ç—Ä–µ —Å 10:00 –¥–æ 17:00\n"
        f"‚Ä¢ –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –æ–±–µ–¥ –∏ –ø–æ–ª–µ–∑–Ω—ã–π –ø–µ—Ä–µ–∫—É—Å\n"
        f"‚Ä¢ –ü—Ä–æ–≥—É–ª–∫–∏ –Ω–∞ —Å–≤–µ–∂–µ–º –≤–æ–∑–¥—É—Ö–µ\n"
        f"‚Ä¢ –ó–∞–Ω—è—Ç–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–∏–º\n"
        f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ –∏–≥—Ä—ã\n"
        f"‚Ä¢ –≠–∫—Å–∫—É—Ä—Å–∏—é –ø–æ —Ç–µ–º–µ —Å–º–µ–Ω—ã\n\n"
        f"{info}",
        callback,
        reply_markup=get_camp_options_keyboard(),
        state=state
    )

@dp.callback_query(lambda c: c.data == "camp_register", Form.waiting_for_camp_option)
async def camp_register_handler(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(Form.waiting_for_camp_registration)
    await callback.message.answer(
        "üèïÔ∏è <b>–ó–∞–ø–∏—Å—å –≤ –≥–æ—Ä–æ–¥—Å–∫–æ–π –ª–∞–≥–µ—Ä—å</b>\n\n"
        "–î–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Å—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ:\n"
        "‚Ä¢ –ò–º—è –∏ –≤–æ–∑—Ä–∞—Å—Ç —Ä–µ–±—ë–Ω–∫–∞\n"
        "‚Ä¢ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n"
        "‚Ä¢ –í—ã–±—Ä–∞–Ω–Ω—É—é —Å–º–µ–Ω—É\n\n"
        "<b>–ü—Ä–∏–º–µ—Ä:</b> <i>–ê–ª–µ–∫—Å–µ–π 10 –ª–µ—Ç 89123456789 –î–µ—Ç–∏ –≤ –±–∏–∑–Ω–µ—Å–µ</i>",
        parse_mode=ParseMode.HTML
    )
    await callback.answer()

@dp.callback_query(lambda c: c.data == "camp_back_to_description", Form.waiting_for_camp_option)
async def camp_back_to_description(callback: types.CallbackQuery, state: FSMContext):
    description = events["child"]["–ì–æ—Ä–æ–¥—Å–∫–æ–π –ª–∞–≥–µ—Ä—å"]["description"]
    details = events["child"]["–ì–æ—Ä–æ–¥—Å–∫–æ–π –ª–∞–≥–µ—Ä—å"]["details"]
    await safe_edit_message(
        f"{description}\n{details}\n–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏?",
        callback,
        reply_markup=get_camp_intro_keyboard(),
        state=state
    )
    await state.set_state(Form.waiting_for_camp_option)

@dp.message(Form.waiting_for_camp_registration)
async def process_camp_registration(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    registration_details = await validate_and_process_registration(
        message, state,
        required_fields=['name', 'phone', 'age']
    )
    
    if not registration_details:
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–º–µ–Ω—É
    camp_names = events["child"]["–ì–æ—Ä–æ–¥—Å–∫–æ–π –ª–∞–≥–µ—Ä—å"]["camps"].keys()
    camp_name = None
    for name in camp_names:
        if name.lower() in message.text.lower():
            camp_name = name
            break
    
    if not camp_name:
        await message.answer("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–∞ —Å–º–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–º–µ–Ω—ã")
        return
    
    registration_details += f" {camp_name}"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å
    registration_data = {
        "event": f"–ì–æ—Ä–æ–¥—Å–∫–æ–π –ª–∞–≥–µ—Ä—å: {camp_name}",
        "details": registration_details,
        "timestamp": str(datetime.now())
    }
    await save_user_registration(message.from_user.id, registration_data)

    await bot.send_message(
        chat_id=NOTIFY_CHAT_ID,
        text=f"üèïÔ∏è –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –≤ –≥–æ—Ä–æ–¥—Å–∫–æ–π –ª–∞–≥–µ—Ä—å ({camp_name}):\n"
             f"üë∂ –†–µ–±–µ–Ω–æ–∫: {registration_details}\n"
             f"üë§ –û—Ç: @{message.from_user.username or '–Ω–µ—Ç'}",
        parse_mode=ParseMode.HTML
    )

    camp_data = events["child"]["–ì–æ—Ä–æ–¥—Å–∫–æ–π –ª–∞–≥–µ—Ä—å"]
    await message.answer(
        f"‚úÖ <b>–ó–∞–ø–∏—Å—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!</b>\n\n"
        f"üèïÔ∏è –°–º–µ–Ω–∞: {camp_name}\n"
        f"üè† –ê–¥—Ä–µ—Å: {camp_data['address']}\n"
        f"üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: {camp_data['price']}\n\n"
        f"–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º: @alinarolina",
        parse_mode=ParseMode.HTML,
        reply_markup=get_camp_success_keyboard()
    )
    
    await state.clear()

@dp.callback_query(lambda c: c.data == "camp_back_to_description", Form.waiting_for_camp_option)
async def camp_back_to_description(callback: types.CallbackQuery, state: FSMContext):
    description = events["child"]["–ì–æ—Ä–æ–¥—Å–∫–æ–π –ª–∞–≥–µ—Ä—å"]["description"]
    details = events["child"]["–ì–æ—Ä–æ–¥—Å–∫–æ–π –ª–∞–≥–µ—Ä—å"]["details"]
    await safe_edit_message(
        f"{description}\n{details}\n–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏?",
        callback,
        reply_markup=get_camp_intro_keyboard(),
        state=state
    )
    await state.set_state(Form.waiting_for_camp_option)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è
@dp.callback_query(lambda c: c.data == "drawing_more", Form.waiting_for_drawing_option)
async def process_drawing_more(callback: types.CallbackQuery, state: FSMContext):
    await safe_edit_message(
        "–†–∏—Å–æ–≤–∞–Ω–∏–µ ‚Äî —ç—Ç–æ –Ω–µ —Ç–æ–ª—å–∫–æ –≤–µ—Å–µ–ª–æ, –Ω–æ –∏ –ø–æ–ª–µ–∑–Ω–æ!\n"
        "–î–µ—Ç–∏ —Ä–∞–∑–≤–∏–≤–∞—é—Ç –≤–æ–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –º–µ–ª–∫—É—é –º–æ—Ç–æ—Ä–∏–∫—É –∏ —Ç–≤–æ—Ä—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ.\n"
        "–ù–∞—à–∏ –∑–∞–Ω—è—Ç–∏—è –ø—Ä–æ—Ö–æ–¥—è—Ç –≤ —É—é—Ç–Ω–æ–º —Ü–µ–Ω—Ç—Ä–µ CoolKids –ø–æ –∞–¥—Ä–µ—Å—É –†—ã–±–∞—Ü–∫–∏–π –ø—Ä-—Ç 23/2.",
        callback,
        reply_markup=get_drawing_options_keyboard(),
        state=state
    )

@dp.callback_query(lambda c: c.data == "drawing_back_to_main", Form.waiting_for_drawing_option)
async def drawing_back_to_main(callback: types.CallbackQuery, state: FSMContext):
    description = events["child"]["–†–∏—Å–æ–≤–∞–Ω–∏–µ"]["description"]
    details = events["child"]["–†–∏—Å–æ–≤–∞–Ω–∏–µ"]["details"]
    await safe_edit_message(
        f"{description}\n{details}\n–ì–æ—Ç–æ–≤—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏?",
        callback,
        reply_markup=get_drawing_keyboard(),
        state=state
    )
    await state.set_state(Form.waiting_for_drawing_option)

@dp.callback_query(lambda c: c.data == "drawing_back_to_options", Form.waiting_for_drawing_option)
async def drawing_back_to_options(callback: types.CallbackQuery, state: FSMContext):
    await process_drawing_more(callback, state)

@dp.callback_query(lambda c: c.data == "drawing_schedule", Form.waiting_for_drawing_option)
async def process_drawing_schedule(callback: types.CallbackQuery, state: FSMContext):
    schedule = events["child"]["–†–∏—Å–æ–≤–∞–Ω–∏–µ"]["schedule"]
    await safe_edit_message(
        f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π:\n{schedule}",
        callback,
        reply_markup=get_drawing_schedule_keyboard(),
        state=state
    )

@dp.callback_query(lambda c: c.data == "drawing_price", Form.waiting_for_drawing_option)
async def process_drawing_price(callback: types.CallbackQuery, state: FSMContext):
    price = events["child"]["–†–∏—Å–æ–≤–∞–Ω–∏–µ"]["price"]
    info = events["child"]["–†–∏—Å–æ–≤–∞–Ω–∏–µ"]["info"]
    await safe_edit_message(
        f"–°—Ç–æ–∏–º–æ—Å—Ç—å —É—á–∞—Å—Ç–∏—è ‚Äî {price}.\n"
        f"{info}",
        callback,
        reply_markup=get_drawing_price_keyboard(),
        state=state
    )

@dp.callback_query(lambda c: c.data == "drawing_register", Form.waiting_for_drawing_option)
async def drawing_register_handler(callback: types.CallbackQuery, state: FSMContext):
    try:
        await state.set_state(Form.waiting_for_user_data)
        await state.update_data(event="–†–∏—Å–æ–≤–∞–Ω–∏–µ")
        await callback.message.answer(
            "üé® <b>–ó–∞–ø–∏—Å—å –Ω–∞ —Ä–∏—Å–æ–≤–∞–Ω–∏–µ</b>\n\n"
            "–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ:\n"
            "1. –ò–º—è –∏ –≤–æ–∑—Ä–∞—Å—Ç —Ä–µ–±–µ–Ω–∫–∞\n"
            "2. –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n"
            "3. –£–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è (17:00 –∏–ª–∏ 18:00)\n\n"
            "<b>–ü—Ä–∏–º–µ—Ä:</b> <i>–ê–ª–µ–∫—Å–µ–π 10 –ª–µ—Ç 89123456789 17:00</i>",
            parse_mode=ParseMode.HTML
        )
        logger.warning(await state.get_state())
        await callback.answer()
    except Exception as e:
        logger.error(f"Error in drawing_register_handler: {e}")
        await callback.answer("–û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ", show_alert=True)

@dp.message(Form.waiting_for_drawing_registration)
async def process_drawing_registration(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    registration_details = await validate_and_process_registration(
        message, state,
        required_fields=['name', 'phone', 'age']
    )
    
    if not registration_details:
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è
    time_match = re.search(r'(17|18)(?::00)?', message.text)
    if not time_match:
        await message.answer("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–æ –≤—Ä–µ–º—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ 17:00 –∏–ª–∏ 18:00")
        return
    
    time = time_match.group().replace(':00', '')
    registration_details += f" {time}:00"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å
    registration_data = {
        "event": "–†–∏—Å–æ–≤–∞–Ω–∏–µ",
        "details": registration_details,
        "timestamp": str(datetime.now())
    }
    await save_user_registration(message.from_user.id, registration_data)

    await bot.send_message(
        chat_id=NOTIFY_CHAT_ID,
        text=f"üé® –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –Ω–∞ —Ä–∏—Å–æ–≤–∞–Ω–∏–µ:\n"
             f"üë§ –î–∞–Ω–Ω—ã–µ: {registration_details}\n"
             f"–û—Ç: @{message.from_user.username or '–Ω–µ—Ç'}",
        parse_mode=ParseMode.HTML
    )

    drawing_data = events["child"]["–†–∏—Å–æ–≤–∞–Ω–∏–µ"]
    await message.answer(
        f"‚úÖ <b>–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∏—Å–æ–≤–∞–Ω–∏–µ!</b>\n\n"
        f"üè† –ê–¥—Ä–µ—Å: {drawing_data['address']}\n"
        f"üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: {drawing_data['price']}\n\n"
        f"–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º: @alinarolina",
        parse_mode=ParseMode.HTML,
        reply_markup=get_chess_success_keyboard()
    )
    
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫—É—Ä—Å–æ–≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
@dp.callback_query(lambda c: c.data == "child_–ö—É—Ä—Å—ã_–∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ_—è–∑—ã–∫–∞")
async def process_english(callback: types.CallbackQuery, state: FSMContext):
    description = events["child"]["–ö—É—Ä—Å—ã –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞"]["description"]
    details = events["child"]["–ö—É—Ä—Å—ã –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞"]["details"]
    await safe_edit_message(
        f"{description}\n{details}\n–ì–æ—Ç–æ–≤—ã —É–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â—É—é –≥—Ä—É–ø–ø—É?",
        callback,
        reply_markup=get_english_keyboard(),
        state=state
    )
    await state.set_state(Form.waiting_for_english_option)

@dp.callback_query(lambda c: c.data == "english_more", Form.waiting_for_english_option)
async def process_english_more(callback: types.CallbackQuery, state: FSMContext):
    await safe_edit_message(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç –≤–∞—à–µ–≥–æ —Ä–µ–±—ë–Ω–∫–∞, —á—Ç–æ–±—ã —è –ø–æ–¥–æ–±—Ä–∞–ª –ø–æ–¥—Ö–æ–¥—è—â—É—é –≥—Ä—É–ø–ø—É:",
        callback,
        reply_markup=get_english_age_keyboard(),
        state=state
    )
    await state.set_state(Form.waiting_for_english_age)

@dp.callback_query(lambda c: c.data.startswith("english_age_"), Form.waiting_for_english_age)
async def process_english_age(callback: types.CallbackQuery, state: FSMContext):
    age_group = callback.data.replace("english_age_", "").replace("_", " ")
    
    if age_group == "4 5":
        age_group = "4‚Äì5 –ª–µ—Ç"
        schedule = events["child"]["–ö—É—Ä—Å—ã –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞"]["schedule"][age_group][0]
        await safe_edit_message(
            f"–î–ª—è –º–∞–ª—ã—à–µ–π {age_group} –ø—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ –ø—Ä–æ–π–¥—ë—Ç {schedule}.\n"
            f"–•–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è?",
            callback,
            reply_markup=get_english_schedule_keyboard(age_group),
            state=state
        )
    elif age_group == "6 7":
        age_group = "6‚Äì7 –ª–µ—Ç"
        await safe_edit_message(
            f"–î–ª—è –¥–µ—Ç–µ–π {age_group} –¥–æ—Å—Ç—É–ø–Ω—ã –¥–≤–∞ –ø—Ä–æ–±–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏—è:\n"
            f"‚Ä¢ {events['child']['–ö—É—Ä—Å—ã –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞']['schedule'][age_group][0]}\n"
            f"‚Ä¢ {events['child']['–ö—É—Ä—Å—ã –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞']['schedule'][age_group][1]}\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è:",
            callback,
            reply_markup=get_english_schedule_keyboard(age_group),
            state=state
        )
    elif age_group == "8 10":
        age_group = "8‚Äì10 –ª–µ—Ç"
        schedule = events["child"]["–ö—É—Ä—Å—ã –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞"]["schedule"][age_group][0]
        await safe_edit_message(
            f"–î–ª—è —Ä–µ–±—è—Ç {age_group} –ø—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ —Å–æ—Å—Ç–æ–∏—Ç—Å—è {schedule}.\n"
            f"–ó–∞–ø–∏—Å–∞—Ç—å –≤–∞—à–µ–≥–æ —Ä–µ–±—ë–Ω–∫–∞?",
            callback,
            reply_markup=get_english_schedule_keyboard(age_group),
            state=state
        )
    elif age_group == "10+":
        age_group = "–°—Ç–∞—Ä—à–µ 10 –ª–µ—Ç"
        await safe_edit_message(
            f"–î–ª—è –¥–µ—Ç–µ–π {age_group} –º—ã –ø—Ä–æ–≤–æ–¥–∏–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –∏–Ω—Ç–µ—Ä–≤—å—é —Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º, —á—Ç–æ–±—ã –ø–æ–¥–æ–±—Ä–∞—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É –æ–±—É—á–µ–Ω–∏—è.\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ, –∏ –º—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏:\n"
            f"‚Ä¢ –ò–º—è –∏ –≤–æ–∑—Ä–∞—Å—Ç —Ä–µ–±—ë–Ω–∫–∞\n"
            f"‚Ä¢ –í–∞—à–µ –∏–º—è\n"
            f"‚Ä¢ –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω",
            callback,
            reply_markup=get_english_schedule_keyboard(age_group),
            state=state
        )
    
    await state.update_data(age_group=age_group)

@dp.callback_query(lambda c: c.data.startswith("english_register_"), Form.waiting_for_english_age)
async def process_english_register(callback: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    age_group = user_data.get("age_group", "")
    
    if "individual" in callback.data:
        await state.set_state(Form.waiting_for_english_registration)
        await callback.message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ—á–∫—É:\n"
            "1. –ò–º—è –∏ –≤–æ–∑—Ä–∞—Å—Ç —Ä–µ–±—ë–Ω–∫–∞\n"
            "2. –í–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é\n"
            "3. –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω\n\n"
            "<b>–ü—Ä–∏–º–µ—Ä:</b> <i>–ê–ª–µ–∫—Å–µ–π 11 –ª–µ—Ç –ú–∞—Ä–∏—è 89123456789</i>",
            parse_mode=ParseMode.HTML
        )
    else:
        date = callback.data.replace("english_register_", "")
        await state.update_data(date=date, event="–ö—É—Ä—Å—ã –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞")
        await state.set_state(Form.waiting_for_english_registration)
        await callback.message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ—á–∫—É:\n"
            "1. –ò–º—è –∏ –≤–æ–∑—Ä–∞—Å—Ç —Ä–µ–±—ë–Ω–∫–∞\n"
            "2. –í–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é\n"
            "3. –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω\n\n"
            "<b>–ü—Ä–∏–º–µ—Ä:</b> <i>–ê–ª–µ–∫—Å–µ–π 11 –ª–µ—Ç –ú–∞—Ä–∏—è 89123456789</i>",
            parse_mode=ParseMode.HTML
        )
    await callback.answer()

@dp.message(Form.waiting_for_english_registration)
async def process_english_registration(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    registration_details = await validate_and_process_registration(
        message, state,
        required_fields=['name', 'phone']
    )
    
    if not registration_details:
        return
    
    age_group = user_data.get("age_group", "")
    date = user_data.get("date", "–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –∏–Ω—Ç–µ—Ä–≤—å—é")
    registration_details += f" {date}"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å
    registration_data = {
        "event": f"–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫ ({age_group})",
        "details": registration_details,
        "timestamp": str(datetime.now())
    }
    await save_user_registration(message.from_user.id, registration_data)

    await bot.send_message(
        chat_id=NOTIFY_CHAT_ID,
        text=f"üá¨üáß –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –Ω–∞ –∫—É—Ä—Å—ã –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ:\n"
             f"üë∂ –í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞: {age_group}\n"
             f"üìÖ –î–∞—Ç–∞: {date}\n"
             f"üìù –î–∞–Ω–Ω—ã–µ: {registration_details}\n"
             f"üë§ –û—Ç: @{message.from_user.username or '–Ω–µ—Ç'}",
        parse_mode=ParseMode.HTML
    )

    await message.answer(
        f"‚úÖ <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–ø–∏—Å—å!</b>\n\n"
        f"–ú—ã –∂–¥—ë–º –≤–∞—Å –≤ –¶–µ–Ω—Ç—Ä–µ CoolKids –ø–æ –∞–¥—Ä–µ—Å—É {events['child']['–ö—É—Ä—Å—ã –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞']['address']}.\n\n"
        f"–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º: @alinarolina",
        parse_mode=ParseMode.HTML,
        reply_markup=get_english_success_keyboard()
    )
    
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ "–ù–∞–∑–∞–¥"
@dp.callback_query(lambda c: c.data == "english_back", Form.waiting_for_english_age)
async def english_back_handler(callback: types.CallbackQuery, state: FSMContext):
    description = events["child"]["–ö—É—Ä—Å—ã –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞"]["description"]
    details = events["child"]["–ö—É—Ä—Å—ã –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞"]["details"]
    await safe_edit_message(
        f"{description}\n{details}\n–ì–æ—Ç–æ–≤—ã —É–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â—É—é –≥—Ä—É–ø–ø—É?",
        callback,
        reply_markup=get_english_keyboard(),
        state=state
    )
    await state.set_state(Form.waiting_for_english_option)

@dp.callback_query(lambda c: c.data == "english_back_to_age", Form.waiting_for_english_age)
async def english_back_to_age_handler(callback: types.CallbackQuery, state: FSMContext):
    await safe_edit_message(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç –≤–∞—à–µ–≥–æ —Ä–µ–±—ë–Ω–∫–∞, —á—Ç–æ–±—ã —è –ø–æ–¥–æ–±—Ä–∞–ª –ø–æ–¥—Ö–æ–¥—è—â—É—é –≥—Ä—É–ø–ø—É:",
        callback,
        reply_markup=get_english_age_keyboard(),
        state=state
    )

@dp.callback_query(lambda c: c.data == "child_back")
async def child_back_handler(callback: types.CallbackQuery, state: FSMContext):
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.edit_text(
            "–ö–∞–∫–æ–µ –¥–µ—Ç—Å–∫–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
            reply_markup=get_child_events_keyboard()
        )
        await state.set_state(Form.waiting_for_event)
        await callback.answer()
    except Exception as e:
        # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–æ–µ)
        await callback.message.answer(
            "–ö–∞–∫–æ–µ –¥–µ—Ç—Å–∫–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
            reply_markup=get_child_events_keyboard()
        )
        await state.set_state(Form.waiting_for_event)
        await callback.answer()

@dp.callback_query(lambda c: c.data == "back_to_event_type")
async def back_to_event_type_handler(callback: types.CallbackQuery, state: FSMContext):
    await safe_edit_message(
        "–ß—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
        callback,
        reply_markup=get_event_type_keyboard(),
        state=state
    )
    await state.set_state(Form.waiting_for_event)

@dp.callback_query(lambda c: c.data == "back_to_adult_events")
async def back_to_adult_events_handler(callback: types.CallbackQuery, state: FSMContext):
    await safe_edit_message(
        "–ö–∞–∫–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
        callback,
        reply_markup=get_adult_events_keyboard(),
        state=state
    )
    await state.set_state(Form.waiting_for_event)

@dp.callback_query(lambda c: c.data == "lectures_back")
async def lectures_back_handler(callback: types.CallbackQuery, state: FSMContext):
    current_state = await state.get_state()
    if current_state in [Form.waiting_for_lecture_option.state, Form.waiting_for_lecture_topic.state]:
        description = events["adult"]["–õ–µ–∫—Ü–∏–∏"]["description"]
        await safe_edit_message(
            f"{description}\n\n"
            f"–í—Å—ë –ø—Ä–æ—Ö–æ–¥–∏—Ç –≤ —É—é—Ç–Ω–æ–º –õ–æ—Ñ—Ç–µ –ø–æ –∞–¥—Ä–µ—Å—É {events['adult']['–õ–µ–∫—Ü–∏–∏']['address']}.\n"
            "–ì–æ—Ç–æ–≤—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏?",
            callback,
            reply_markup=get_lectures_intro_keyboard(),
            state=state
        )
        await state.set_state(Form.waiting_for_lecture_option)
    else:
        await callback.answer("–ù–µ–ª—å–∑—è –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ –∏–∑ —ç—Ç–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è")  

@dp.callback_query(lambda c: c.data == "back_to_lectures")
async def back_to_lectures_handler(callback: types.CallbackQuery, state: FSMContext):
    lectures = events["adult"]["–õ–µ–∫—Ü–∏–∏"]["lectures"]
    lectures_text = "–í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ –≤–∞—Å –∂–¥—É—Ç —Ç—Ä–∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–µ –ª–µ–∫—Ü–∏–∏:\n\n"
    
    for i, (key, lecture) in enumerate(lectures.items(), 1):
        lectures_text += f"{i}Ô∏è‚É£ {lecture['title']}\n{lecture['description']}\n\n"
    
    await safe_edit_message(
        lectures_text,
        callback,
        reply_markup=get_lectures_topics_keyboard(),
        state=state
    )
    await state.set_state(Form.waiting_for_lecture_option)

@dp.callback_query(lambda c: c.data == "back_to_start")
async def back_to_start_handler(callback: types.CallbackQuery, state: FSMContext):
    await safe_edit_message(
        "–ß—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
        callback,
        reply_markup=get_event_type_keyboard(),
        state=state
    )
    await state.set_state(Form.waiting_for_event)

@dp.callback_query(lambda c: c.data == "camp_back_to_main", Form.waiting_for_camp_option)
async def camp_back_to_main(callback: types.CallbackQuery, state: FSMContext):
    description = events["child"]["–ì–æ—Ä–æ–¥—Å–∫–æ–π –ª–∞–≥–µ—Ä—å"]["description"]
    details = events["child"]["–ì–æ—Ä–æ–¥—Å–∫–æ–π –ª–∞–≥–µ—Ä—å"]["details"]
    await safe_edit_message(
        f"{description}\n{details}\n–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏?",
        callback,
        reply_markup=get_camp_intro_keyboard(),
        state=state
    )
    await state.set_state(Form.waiting_for_camp_option)

@dp.callback_query(lambda c: c.data == "camp_back_to_options", Form.waiting_for_camp_details)
async def camp_back_to_options_handler(callback: types.CallbackQuery, state: FSMContext):
    camps = events["child"]["–ì–æ—Ä–æ–¥—Å–∫–æ–π –ª–∞–≥–µ—Ä—å"]["camps"]
    camps_text = "–í —ç—Ç–æ–º –≥–æ–¥—É –º—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ 6 —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å–º–µ–Ω ‚Äî –∫–∞–∂–¥—ã–π —Ä–µ–±—ë–Ω–æ–∫ –Ω–∞–π–¥—ë—Ç —Å–µ–±–µ –∑–∞–Ω—è—Ç–∏–µ –ø–æ –¥—É—à–µ!\n\n"
    
    for camp_name, camp_data in camps.items():
        camps_text += f"‚Ä¢ {camp_name} ‚Äî {camp_data['dates']}\n"
    
    await safe_edit_message(
        camps_text,
        callback,
        reply_markup=get_camp_options_keyboard(),
        state=state
    )
    await state.set_state(Form.waiting_for_camp_option)

@dp.callback_query(lambda c: c.data == "drawing_back_to_main")
async def drawing_back_to_main_handler(callback: types.CallbackQuery, state: FSMContext):
    description = events["child"]["–†–∏—Å–æ–≤–∞–Ω–∏–µ"]["description"]
    details = events["child"]["–†–∏—Å–æ–≤–∞–Ω–∏–µ"]["details"]
    await safe_edit_message(
        f"{description}\n{details}\n–ì–æ—Ç–æ–≤—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏?",
        callback,
        reply_markup=get_drawing_keyboard(),
        state=state
    )
    await state.set_state(Form.waiting_for_drawing_option)

@dp.callback_query(lambda c: c.data == "to_main_menu")
async def return_to_main_menu(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    try:
        await callback.message.delete()
    except:
        pass
    await callback.message.answer(
        "–ß—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
        reply_markup=get_event_type_keyboard()
    )
    await callback.answer()
    await state.set_state(Form.waiting_for_event)
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö callback-–∑–∞–ø—Ä–æ—Å–æ–≤
@dp.callback_query()
async def handle_unprocessed_callbacks(callback: types.CallbackQuery):
    try:
        await callback.answer()
    except:
        pass

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())

if __name__ == '__main__':
    asyncio.run(main())